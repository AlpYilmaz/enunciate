[#ftl]
[#-- @ftlvariable name="type" type="com.webcohesion.enunciate.modules.jaxb.model.QNameEnumTypeDefinition" --]
[#-- @ftlvariable name="rootEl" type="com.webcohesion.enunciate.modules.jaxb.model.RootElementDeclaration" --]
[#-- @ftlvariable name="generatedCodeLicense" type="java.lang.String" --]
[#--template for the client-side enum type.--]
[@file name=(type.simpleName + ".java")  package=packageFor(type) charset="utf-8"]
/**
 * ${(generatedCodeLicense!"")?replace("\n", "\n * ")}
 *
 * Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
 */
package ${packageFor(type)};

/**
 * ${type.docComment!"(no documentation provided)"?chop_linebreak?replace("\n", "\n * ")}
 */
public enum ${type.simpleName} {
  [#assign unknownQNameEnum=""/]
  [#list type.getEnumValues() as enumValue]
    [#if !isFacetExcluded(enumValue)]
    [#-- @ftlvariable name="constant" type="com.webcohesion.enunciate.javac.decorations.element.DecoratedVariableElement" --]
      [#if !(enumValue.value??)]
        [#assign unknownQNameEnum = enumValue.name/]
      [/#if]

  /**
   * ${enumValue.docComment!"(no documentation provided)"?chop_linebreak?replace("\n", "\n   * ")}
   */
  ${enumValue.name}[#if enumValue_has_next],[#else];[/#if]
    [/#if]
  [/#list]

  /**
   * Convert this enum to a QName.
   *
   */
  public ${classnameFor(type.enumBaseClass)} toQName() {
    return convertToKnownQName(this);
  }

  /**
   * Convert a QName to a ${type.simpleName}. If the QName is not a known QName, [#if unknownQNameEnum != ""]${type.simpleName}.${unknownQNameEnum}[#else]null[/#if] will be returned.
   */
  public static ${type.simpleName} convertFromKnownQName(${classnameFor(type.enumBaseClass)} qname) {
    if (qname == null) {
      return null;
    }
    [#list type.getEnumValues() as enumValue]
      [#if !isFacetExcluded(enumValue)]
        [#if enumValue.value??]
          [#if !type.uriBaseType]
    if ("${enumValue.value.namespaceURI}".equals(qname.getNamespaceURI())
        && "${enumValue.value.localPart}".equals(qname.getLocalPart())) {
          [#else]
    if ("${enumValue.value.namespaceURI}${enumValue.value.localPart}".equals(qname.toString())) {
          [/#if]
      return ${type.simpleName}.${enumValue.name};
    }
        [/#if]
      [/#if]
    [/#list]
    return [#if unknownQNameEnum != ""]${type.simpleName}.${unknownQNameEnum}[#else]null[/#if];
  }

  [#if type.uriBaseType]
  /**
  * Convert a QName to a ${type.simpleName}. If the QName is not a known QName, [#if unknownQNameEnum != ""]${type.simpleName}.${unknownQNameEnum}[#else]null[/#if] will be returned.
  */
  public static ${type.simpleName} convertFromKnownQName(String uri) {
    try {
      return convertFromKnownQName(new java.net.URI(uri));
    }
    catch (java.net.URISyntaxException e) {
      return [#if unknownQNameEnum != ""]${type.simpleName}.${unknownQNameEnum}[#else]null[/#if];
    }
  }

  [/#if]
  /**
   * Convert a ${type.simpleName} to a QName.
   *
    [#if unknownQNameEnum != ""]
   * @throws IllegalArgumentException If ${type.simpleName}.${unknownQNameEnum} is passed.
    [/#if]
   */
  public static ${classnameFor(type.enumBaseClass)} convertToKnownQName(${type.simpleName} value) {
    if (value == null) {
      return null;
    }
    switch (value) {
    [#list type.getEnumValues() as enumValue]
      [#if !isFacetExcluded(enumValue)]
        [#if enumValue.value??]
      case ${enumValue.name}:
          [#if !type.uriBaseType]
        return new javax.xml.namespace.QName("${enumValue.value.namespaceURI}", "${enumValue.value.localPart}");
          [#else]
        return java.net.URI.create("${enumValue.value.namespaceURI}${enumValue.value.localPart}");
          [/#if]
        [/#if]
      [/#if]
    [/#list]
      default:
        throw new IllegalArgumentException("No known QName for: " + value);
    }
  }
}
[/@file]