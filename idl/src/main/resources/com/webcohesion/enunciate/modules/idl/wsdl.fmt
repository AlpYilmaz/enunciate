[#ftl]
[#-- @ftlvariable name="wsdl" type="com.webcohesion.enunciate.modules.jaxws.WsdlInfo" --]
[#-- @ftlvariable name="baseUri" type="java.lang.String" --]
[#import "schemalib.fmt" as libSchema/]
[#-- assign the prefix variable for the "this" namespace --]
[#assign tns=prefix(wsdl.targetNamespace)]
[#-- assign the prefix variable for the "wsdl" namespace --]
[#assign wsdldef=prefix("http://schemas.xmlsoap.org/wsdl/")]
[#-- assign the prefix variable for the "http" namespace --]
[#assign http=prefix("http://schemas.xmlsoap.org/wsdl/http/")]
[#-- assign the prefix variable for the "mime" namespace --]
[#assign mime=prefix("http://schemas.xmlsoap.org/wsdl/mime/")]
[#-- assign the prefix variable for the "soap" namespace --]
[#assign soap=prefix("http://schemas.xmlsoap.org/wsdl/soap/")]
[#-- assign the prefix variable for the "soapenc" namespace --]
[#assign soapenc=prefix("http://schemas.xmlsoap.org/soap/encoding/")]
[#-- assign the prefix variable for the schema namespace --]
[#assign xs=prefix("http://www.w3.org/2001/XMLSchema")]
[#t]
<?xml version="1.0" encoding="UTF-8"?>
<?enunciate-assumed-base-uri ${baseUri}?>
<${wsdldef}:definitions targetNamespace="${wsdl.targetNamespace}"
    [#list wsdl.importedNamespaces as importedNamespace]
      [#if importedNamespace?? && importedNamespace?length > 0]
   xmlns:${prefix(importedNamespace)}="${importedNamespace}"
      [/#if]
    [/#list]
   >

  <${wsdldef}:types>
    [@processSchema wsdl=wsdl/]
  </${wsdldef}:types>

    [#-- output the web messages --]
    [#list wsdl.webMessages as webMessage]
      [#if !isFacetExcluded(webMessage)]
        [@processMessage webMessage=webMessage/]
      [/#if]
    [/#list]

    [#list wsdl.endpointInterfaces as endpointInterface]
      [#if !isFacetExcluded(endpointInterface)]
        [@processPortType endpointInterface=endpointInterface/]
      [/#if]
    [/#list]
    [#t]

    [#list wsdl.endpointInterfaces as endpointInterface]
      [#if !isFacetExcluded(endpointInterface)]
        [@processBindings endpointInterface=endpointInterface/]
      [/#if]
    [/#list]

    [#list wsdl.endpointInterfaces as endpointInterface]
      [#if !isFacetExcluded(endpointInterface)]
        [@processServices endpointInterface=endpointInterface/]
      [/#if]
    [/#list]
</${wsdldef}:definitions>

[#--
  The processSchema macro outputs a schema element for a specified wsdl.

  @param wsdl The WSDL to output.  (Instance of org.codehaus.enunciate.config.WsdlInfo)
--]
[#macro processSchema wsdl]
  [#-- @ftlvariable name="wsdl" type="com.webcohesion.enunciate.modules.jaxws.WsdlInfo" --]
  <${xs}:schema targetNamespace="${wsdl.targetNamespace}"[#if wsdl.associatedSchema?? && wsdl.associatedSchema.elementFormDefault??] elementFormDefault="${wsdl.associatedSchema.elementFormDefault}" [/#if][#if wsdl.associatedSchema?? && wsdl.associatedSchema.attributeFormDefault??] attributeFormDefault="${wsdl.associatedSchema.attributeFormDefault}" [/#if]>
  [#list wsdl.importedSchemas as schema]
    <${xs}:import[#if schema.namespace?? && schema.namespace?length > 0] namespace="${schema.namespace}"[/#if][#if schema.explicitLocation??] schemaLocation="${schema.explicitLocation}"[#elseif schema.filename??] schemaLocation="${schema.filename}"[/#if]/>
  [/#list]
  [#if wsdl.associatedSchema??]
    [#if wsdl.inlineSchema]
      [@libSchema.processSchemaBody schema=wsdl.associatedSchema/]
    [#elseif wsdl.associatedSchema.explicitLocation??]
      <${xs}:include schemaLocation="${wsdl.associatedSchema.explicitLocation}"/>
    [#elseif wsdl.associatedSchema.filename??]
      <${xs}:include schemaLocation="${wsdl.associatedSchema.filename}"/>
    [/#if]
  [/#if]
  </${xs}:schema>
[/#macro]

[#--
  The processMessage macro outputs a message element for a specified web message.

  @param webMessage The web message to output.  (Instance of org.codehaus.enunciate.contract.jaxws.WebMessage)
--]
[#macro processMessage webMessage]
  [#-- @ftlvariable name="webMessage" type="com.webcohesion.enunciate.modules.jaxws.model.WebMessage" --]
  <${wsdldef}:message name="${webMessage.messageName}">
      [#if webMessage.messageDocs??]
    <${wsdldef}:documentation>
      <![CDATA[${webMessage.messageDocs?trim}]]>
    </${wsdldef}:documentation>
      [/#if]
      [#list webMessage.parts as part]
    <${wsdldef}:part name="${part.partName}" ${part.particleType?lower_case}="${part.particleQName}">
        [#if part.partDocs??]
      <${wsdldef}:documentation>
        <![CDATA[${part.partDocs?trim}]]>
      </${wsdldef}:documentation>
        [/#if]
    </${wsdldef}:part>
      [/#list]
  </${wsdldef}:message>
[/#macro]

[#--
  The processPortType macro outputs a portType element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processPortType endpointInterface]
  [#-- @ftlvariable name="endpointInterface" type="com.webcohesion.enunciate.modules.jaxws.model.EndpointInterface" --]
  <${wsdldef}:portType name="${endpointInterface.portTypeName}">
      [#if endpointInterface.docValue??]
    <${wsdldef}:documentation>
      <![CDATA[${endpointInterface.docValue}]]>
    </${wsdldef}:documentation>
      [/#if]
      [#list endpointInterface.webMethods as webMethod]
        [#if !isFacetExcluded(webMethod)]
          [@processOperation webMethod=webMethod/]
        [/#if]
      [/#list]
  </${wsdldef}:portType>
[/#macro]

[#--
  The processOperation macro outputs an operation element for a web method.

  @param webMethod The web method to output.  (Instance of org.codehaus.enunciate.contract.jaxws.WebMethod)
--]
[#macro processOperation webMethod]
  [#-- @ftlvariable name="webMethod" type="com.webcohesion.enunciate.modules.jaxws.model.WebMethod" --]
  <${wsdldef}:operation name="${webMethod.operationName}">
      [#if webMethod.docValue??]
    <${wsdldef}:documentation>
      <![CDATA[${webMethod.docValue}]]>
    </${wsdldef}:documentation>
      [/#if]
      [#list webMethod.inputMessages as input]
    <${wsdldef}:input message="${tns}:${input.messageName}"/>
      [/#list]
      [#list webMethod.outputMessages as output]
    <${wsdldef}:output message="${tns}:${output.messageName}"/>
      [/#list]
      [#list webMethod.webFaults as fault]
    <${wsdldef}:fault name="${fault.partName}" message="${tns}:${fault.messageName}"/>
      [/#list]
  </${wsdldef}:operation>
[/#macro]

[#--
  The processBindings macro outputs a all binding elements for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processBindings endpointInterface]
  [#-- @ftlvariable name="endpointInterface" type="com.webcohesion.enunciate.modules.jaxws.model.EndpointInterface" --]
  [#list endpointInterface.bindingTypes as bindingType]
    [#if bindingType.soap11 || bindingType.soap12]

      [@processSOAPBinding endpointInterface=endpointInterface/]
    [#elseif bindingType.http]

      [@processHTTPBinding endpointInterface=endpointInterface/]
    [#else]
      [#stop "unknown binding type: " + bindingType.namespace]
    [/#if]
  [/#list]
[/#macro]

[#--todo: figure out whether/if I need to process a MIME SOAP binding for attachments?--]

[#--
  The processSOAPBinding macro outputs a soap binding element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processSOAPBinding endpointInterface]
  [#-- @ftlvariable name="endpointInterface" type="com.webcohesion.enunciate.modules.jaxws.model.EndpointInterface" --]
  <${wsdldef}:binding name="${endpointInterface.soapBindingName}" type="${tns}:${endpointInterface.portTypeName}">
    <${wsdldef}:documentation>
      <![CDATA[SOAP Binding for ${endpointInterface.portTypeName}]]>
    </${wsdldef}:documentation>
    <${soap}:binding transport="http://schemas.xmlsoap.org/soap/http" style="${endpointInterface.soapBindingStyle?lower_case}"/>
      [#list endpointInterface.webMethods as webMethod]
    <${wsdldef}:operation name="${webMethod.operationName}">
      <${soap}:operation soapAction="${webMethod.action}"[#if (webMethod.soapBindingStyle?lower_case) != (endpointInterface.soapBindingStyle?lower_case)] style="${webMethod.soapBindingStyle?lower_case}"[/#if]/>
      <${wsdldef}:input>
        [#list webMethod.inputMessages as message]
          [#if message.header]
        <${soap}:header message="${tns}:${message.messageName}" part="${message.partName}"/>
          [/#if]
        [/#list]
        [#-- todo: figure out if this element is valid even if there isn't a body. --]
        <${soap}:body use="literal"[#if webMethod.requestWrapper?? && webMethod.soapBindingStyle?lower_case == "rpc"] namespace="${webMethod.requestWrapper.elementNamespace!""}"[/#if]/>
      </${wsdldef}:input>
      <${wsdldef}:output>
        [#list webMethod.inputMessages as message]
          [#if message.header]
        <${soap}:header message="${tns}:${message.messageName}" part="${message.partName}"/>
          [/#if]
        [/#list]
        [#-- todo: figure out if this element is valid even if there isn't a body. --]
        <${soap}:body use="literal"[#if webMethod.responseWrapper?? && webMethod.soapBindingStyle?lower_case == "rpc"] namespace="${webMethod.responseWrapper.elementNamespace!""}"[/#if]/>
      </${wsdldef}:output>
        [#list webMethod.webFaults as webFault]
      <${wsdldef}:fault name="${webFault.partName}">
        <${soap}:fault name="${webFault.partName}" use="literal"/>
      </${wsdldef}:fault>
        [/#list]
    </${wsdldef}:operation>
      [/#list]
  </${wsdldef}:binding>
[/#macro]

[#--
  The processHTTPBinding macro outputs an HTTP binding element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processHTTPBinding endpointInterface]
  [#-- @ftlvariable name="endpointInterface" type="com.webcohesion.enunciate.modules.jaxws.model.EndpointInterface" --]
  <${wsdldef}:binding name="${endpointInterface.simpleName}HTTPBinding" type="${tns}:${endpointInterface.portTypeName}">
    <${wsdldef}:documentation>
      <![CDATA[HTTP Binding for ${endpointInterface.portTypeName}]]>
    </${wsdldef}:documentation>
    <${http}:binding verb="POST"/>
      [#list endpointInterface.webMethods as webMethod]
    <${wsdldef}:operation name="${webMethod.operationName}">
      <${http}:operation location="TBD"/>
      <${wsdldef}:input>
        <${http}:urlEncoded/>
      </${wsdldef}:input>
      <${wsdldef}:output>
        <${http}:urlEncoded/>
      </${wsdldef}:output>
    </${wsdldef}:operation>
      [/#list]
  </${wsdldef}:binding>
[/#macro]

[#--
  The processServices macro outputs the service element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processServices endpointInterface]
  [#-- @ftlvariable name="endpointInterface" type="com.webcohesion.enunciate.modules.jaxws.model.EndpointInterface" --]
  <${wsdldef}:service name="${endpointInterface.serviceName}">
      [#list endpointInterface.bindingTypes as bindingType]
        [#if bindingType.soap11 || bindingType.soap12]
          [@processSOAPServicePort endpointInterface=endpointInterface/]
        [#elseif bindingType.http]
          [@processHTTPServicePort endpointInterface=endpointInterface/]
        [/#if]
      [/#list]
  </${wsdldef}:service>
[/#macro]

[#--
  The processSOAPServicePort macro outputs a soap port element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processSOAPServicePort endpointInterface]
    [#-- @ftlvariable name="endpointInterface" type="com.webcohesion.enunciate.modules.jaxws.model.EndpointInterface" --]
    <${wsdldef}:port name="${endpointInterface.simpleName}Port" binding="${tns}:${endpointInterface.soapBindingName}">
      <${soap}:address location="${baseUri}${endpointInterface.path?substring(1)}"/>
    </${wsdldef}:port>
[/#macro]

[#--
  The processHTTPServicePort macro outputs a http port element for a specified endpoint interface.

  @param endpointInterface The endpoint interface to output.  (Instance of org.codehaus.enunciate.contract.jaxws.EndpointInterface)
--]
[#macro processHTTPServicePort endpointInterface]
    <${wsdldef}:port name="${endpointInterface.simpleName}HTTPPort" binding="${tns}:${endpointInterface.simpleName}HTTPBinding">
      [#--todo: make this address a known token so the server-side code can process it.--]
      [#--todo: add an option to state this address statically.--]
      <${http}:address location="TBD"/>
    </${wsdldef}:port>
[/#macro]