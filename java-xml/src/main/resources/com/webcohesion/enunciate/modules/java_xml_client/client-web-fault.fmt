[#ftl]
[#-- @ftlvariable name="fault" type="com.webcohesion.enunciate.modules.jaxws.model.WebFault" --]
[#-- @ftlvariable name="generatedCodeLicense" type="java.lang.String" --]
[#--template for the client-side web fault.--]
[@file name=(fault.simpleName + ".java")  package=packageFor(fault) charset="utf-8"]
/**
 * ${(generatedCodeLicense!"")?replace("\n", "\n * ")}
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 */
package ${packageFor(fault)};

/**
 * ${fault.docComment!"(no documentation provided)"?chop_linebreak?replace("\n", "\n * ")}
 */
@javax.xml.ws.WebFault (
  faultBean = "${fault.implicitFaultBeanQualifiedName!classnameFor(fault.explicitFaultBeanType)}"
)
public class ${fault.simpleName} extends Exception {
  [#if !fault.implicitSchemaElement]
    [#assign beanfqn=classnameFor(fault.explicitFaultBeanType)/]

  private ${beanfqn} faultInfo;

  public ${fault.simpleName}(String message, ${beanfqn} faultInfo) {
    super(message);
    this.faultInfo = faultInfo;
  }

  public ${fault.simpleName}(String message, ${beanfqn} faultInfo, Throwable cause) {
    super(message, cause);
    this.faultInfo = faultInfo;
  }

  /**
   * The fault info for this exception.
   */
  public ${beanfqn} getFaultInfo() {
    return this.faultInfo;
  }

  [#else]
    [#assign beanfqn=fault.implicitFaultBeanQualifiedName/]
    [#assign beanPackage=packageFor(beanfqn[0..(beanfqn?last_index_of(".") - 1)])/]
    [#assign simpleBeanName=beanfqn[(beanfqn?last_index_of(".") + 1)..]/]
    [#assign beanfqn=(beanPackage + "." + simpleBeanName)/]
  private ${beanfqn} faultInfo;

  public ${fault.simpleName}(String message, ${beanfqn} faultInfo) {
    super(message);
    init(faultInfo);
    [#list fault.childElements as childElement]
      [#-- @ftlvariable name="childElement" type="com.webcohesion.enunciate.modules.jaxws.model.WebFault.FaultBeanChildElement" --]
      [#if childElement.property.simpleName = "message"]
    if (message != null) {
      this.message = message;
    }
      [/#if]
    [/#list]
  }

  public ${fault.simpleName}(String message, ${beanfqn} faultInfo, Throwable cause) {
    super(message, cause);
    init(faultInfo);
    [#list fault.childElements as childElement]
      [#if childElement.property.simpleName = "message"]
    if (message != null) {
      this.message = message;
    }
      [/#if]
    [/#list]
  }

  protected void init(${beanfqn} faultInfo) {
    [#list fault.childElements as childElement]
      [#assign element=childElement.property/]
    set${element.simpleName.toString()?cap_first}(faultInfo.get${element.simpleName.toString()?cap_first}());
    [/#list]
  }

  /**
   * The fault info for this exception.
   */
  public ${beanfqn} getFaultInfo() {
    return this.faultInfo;
  }
    [#list fault.childElements as childElement]
      [#assign element=childElement.property/]

  private ${classnameFor(childElement)} ${element.simpleName};

  /**
   * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  public ${classnameFor(childElement)} get${element.simpleName.toString()?cap_first}() {
    return this.${element.simpleName};
  }

  /**
   * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  public void set${element.simpleName.toString()?cap_first}(${classnameFor(childElement)} ${element.simpleName}) {
    this.${element.simpleName} = ${element.simpleName};
  }
    [/#list]
  [/#if]

}
[/@file]