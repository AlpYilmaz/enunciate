[#ftl]
[#--

    Copyright Â© 2006-2016 Web Cohesion (info@webcohesion.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

--]
[#--template for the client-side enum type.--]
[#macro writeEnumTypeHeader type]
  [#-- @ftlvariable name="type" type="com.webcohesion.enunciate.modules.jaxb.model.EnumTypeDefinition" --]
  [#assign typeName=nameForTypeDefinition(type)/]
#ifndef DEF_${typeName}_H
#define DEF_${typeName}_H

/**
 * ${(type.docComment!"(no documentation provided)")?chop_linebreak?replace("\n", "\n * ")}
 */
enum ${typeName}
{
[#list type.getEnumValues() as enumValue]
  [#if !isFacetExcluded(enumValue)]

  /**
   * ${(enumValue.docComment!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  ${nameForEnumConstant(enumValue)}[#if enumValue_has_next],[/#if]
  [/#if]
[/#list]
};
  [#if !(type.QNameEnum!false)]
/**
 * Reads a ${type.clientSimpleName} from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ${type.clientSimpleName}, or NULL if unable to be read.
 */
static enum ${typeName} *xmlTextReaderRead${typeName}Type(xmlTextReaderPtr reader);

/**
 * Writes a ${type.clientSimpleName} to XML.
 *
 * @param writer The XML writer.
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWrite${typeName}Type(xmlTextWriterPtr writer, enum ${typeName} *_${type.clientSimpleName?uncap_first});

/**
 * Utility method for getting the enum value for a string.
 *
 * @param _${type.clientSimpleName?uncap_first} The string to format.
 * @return The enum value or NULL on error.
 */
static enum ${typeName} *formatStringTo${typeName}Type(NSString *_${type.clientSimpleName?uncap_first});

/**
 * Utility method for getting the string value of ${type.clientSimpleName}.
 *
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to format.
 * @return The string value or NULL on error.
 */
static NSString *format${typeName}TypeToString(enum ${typeName} *_${type.clientSimpleName?uncap_first});
  [#else]
/**
 * Gets the known ${type.clientSimpleName} for a QName.
 *
 * @param qname The QName
 * @return The ${type.clientSimpleName}, or -1 if unable to be read.
 */
static enum ${typeName} getKnown${typeName}(${classnameFor(type.enumBaseClass)} *qname);

/**
 * Convert a known ${type.clientSimpleName} to a QName.
 *
 * @param _${type.clientSimpleName?uncap_first} The known ${type.clientSimpleName}.
 * @return The QName, or nil if an unknown enum constant.
 */
static ${classnameFor(type.enumBaseClass)} *convertKnown${typeName}(enum ${typeName} _${type.clientSimpleName?uncap_first});
  [/#if]
#endif /* DEF_${typeName}_H */
[/#macro]
[#macro writeEnumTypeImpl type]
  [#assign typeName=nameForTypeDefinition(type)/]
#ifndef DEF_${typeName}_M
#define DEF_${typeName}_M
  [#if !(type.QNameEnum!false)]

/**
 * Reads a ${type.clientSimpleName} from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ${type.clientSimpleName}, or NULL if unable to be read.
 */
static enum ${typeName} *xmlTextReaderRead${typeName}Type(xmlTextReaderPtr reader)
{
  xmlChar *enumValue = xmlTextReaderReadEntireNodeValue(reader);
  enum ${typeName} *value = calloc(1, sizeof(enum ${typeName}));
  if (enumValue != NULL) {
    [#list type.getEnumValues() as enumValue]
      [#if !isFacetExcluded(enumValue)]
    if (xmlStrcmp(enumValue, BAD_CAST "${enumValue.value}") == 0) {
      *value = ${nameForEnumConstant(enumValue)};
      free(enumValue);
      return value;
    }
      [/#if]
    [/#list]
#if DEBUG_ENUNCIATE
    NSLog(@"Attempt to read enum value failed: %s doesn't match an enum value.", enumValue);
#endif
  }
#if DEBUG_ENUNCIATE
  else {
    NSLog(@"Attempt to read enum value failed: NULL value.");
  }
#endif

  return NULL;
}

/**
 * Utility method for getting the enum value for a string.
 *
 * @param _${type.clientSimpleName?uncap_first} The string to format.
 * @return The enum value or NULL on error.
 */
enum ${typeName} *formatStringTo${typeName}Type(NSString *_${type.clientSimpleName?uncap_first})
{
  enum ${typeName} *value = calloc(1, sizeof(enum ${typeName}));
    [#list type.getEnumValues() as enumValue]
      [#if !isFacetExcluded(enumValue)]
        [#if enumValue_index == 0]
  if (${"[@"}"${enumValue.value}" isEqualToString:_${type.clientSimpleName?uncap_first}]) {
    *value = ${nameForEnumConstant(enumValue)};
  }
        [#else]
  else if (${"[@"}"${enumValue.value}" isEqualToString:_${type.clientSimpleName?uncap_first}]) {
    *value = ${nameForEnumConstant(enumValue)};
  }
        [/#if]
      [/#if]
    [/#list]
  else{
#if DEBUG_ENUNCIATE
  NSLog(@"Attempt to read enum value failed: %s doesn't match an enum value.", [_${type.clientSimpleName?uncap_first} UTF8String]);
#endif
    value = NULL;
  }
  return value;
}

/**
 * Writes a ${type.clientSimpleName} to XML.
 *
 * @param writer The XML writer.
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWrite${typeName}Type(xmlTextWriterPtr writer, enum ${typeName} *_${type.clientSimpleName?uncap_first})
{
  switch (*_${type.clientSimpleName?uncap_first}) {
    [#list type.getEnumValues() as enumValue]
      [#if !isFacetExcluded(enumValue)]
    case ${nameForEnumConstant(enumValue)}:
      return xmlTextWriterWriteString(writer, BAD_CAST "${enumValue.value}");
      [/#if]
    [/#list]
  }

#if DEBUG_ENUNCIATE
  NSLog(@"Unable to write enum value (no valid value found).");
#endif
  return -1;
}

/**
 * Utility method for getting the string value of ${type.clientSimpleName}.
 *
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to format.
 * @return The string value or NULL on error.
 */
static NSString *format${typeName}TypeToString(enum ${typeName} *_${type.clientSimpleName?uncap_first})
{
  switch (*_${type.clientSimpleName?uncap_first}) {
    [#list type.getEnumValues() as enumValue]
      [#if !isFacetExcluded(enumValue)]
    case ${nameForEnumConstant(enumValue)}:
      return @"${enumValue.value}";
      [/#if]
    [/#list]
    default:
      return NULL;
  }

  return NULL;
}
  [#else]
/**
 * Gets the known ${type.clientSimpleName} for a QName.
 *
 * @param qname The QName
 * @return The ${type.clientSimpleName}, or -1 if unable to be read.
 */
static enum ${typeName} getKnown${typeName}(${classnameFor(type.enumBaseClass)} *qname)
{
  if (qname) {
    [#assign unknownQNameEnum=""/]
    [#list type.getEnumValues() as enumValue]
      [#if !isFacetExcluded(enumValue)]
        [#if enumValue.value??]
          [#if !type.uriBaseType]
    if (([#if enumValue.value.namespaceURI == ""][[qname namespaceURI] length] == 0[#else]${"[@"}"${enumValue.value.namespaceURI}" isEqualToString:[qname namespaceURI] ][/#if])
        && (${"[@"}"${enumValue.value.localPart}" isEqualToString:[qname localPart] ])) {
          [#else]
    if (${"[@"}"${enumValue.value.namespaceURI}${enumValue.value.localPart}" isEqualToString:[qname absoluteString]]) {
          [/#if]
      return ${nameForEnumConstant(enumValue)};
    }
        [#else]
          [#assign unknownQNameEnum=nameForEnumConstant(enumValue)/]
        [/#if]
      [/#if]
    [/#list]
    [#if unknownQNameEnum = ""]
#if DEBUG_ENUNCIATE
      [#if !type.uriBaseType]
    NSLog(@"Attempt to read known qname value failed: qname {%@}%@ doesn't match an enum value: returning null.", [qname namespaceURI], [qname localPart]);
      [#else]
    NSLog(@"Attempt to read known qname value failed: qname %@ doesn't match an enum value: returning null.", [qname absoluteString]);
      [/#if]
#endif
    return -1;
    [#else]
#if DEBUG_ENUNCIATE
      [#if !type.uriBaseType]
    NSLog(@"Attempt to read known qname value failed: qname {%@}%@ doesn't match an enum value: returning ${unknownQNameEnum}.", [qname namespaceURI], [qname localPart]);
      [#else]
    NSLog(@"Attempt to read known qname value failed: qname %@ doesn't match an enum value: returning ${unknownQNameEnum}.", [qname absoluteString]);
      [/#if]
#endif
    return ${unknownQNameEnum};
    [/#if]
  }
  else {
#if DEBUG_ENUNCIATE
    NSLog(@"Attempt to read known qname value failed: nil value.");
#endif
    return -1;
  }
}

/**
 * Convert a known ${type.clientSimpleName} to a QName.
 *
 * @param _${type.clientSimpleName?uncap_first} The known ${type.clientSimpleName}.
 * @return The QName, or nil if an unknown enum constant.
 */
static ${classnameFor(type.enumBaseClass)} *convertKnown${typeName}(enum ${typeName} _${type.clientSimpleName?uncap_first})
{
  ${classnameFor(type.enumBaseClass)} *qname;
  switch (_${type.clientSimpleName?uncap_first}) {
    [#list type.getEnumValues() as enumValue]
      [#if !isFacetExcluded(enumValue)]
        [#if enumValue.value??]
    case ${nameForEnumConstant(enumValue)}:
          [#if !type.uriBaseType]
      qname = [[QName alloc] init];
      [qname setNamespaceURI: @"${enumValue.value.namespaceURI}"];
      [qname setLocalPart: @"${enumValue.value.localPart}"];
      [qname setPrefix: @"${prefix(enumValue.value.namespaceURI)}"];
          [#else]
      qname = [NSURL URLWithString: @"${enumValue.value.namespaceURI}${enumValue.value.localPart}"];
          [/#if]
      [qname autorelease];
      return qname;
        [#else]
    case ${nameForEnumConstant(enumValue)}:
#if DEBUG_ENUNCIATE
      NSLog(@"Unable to convert enum value ${nameForEnumConstant(enumValue)}.");
#endif
      return nil;
        [/#if]
      [/#if]
    [/#list]
  }

#if DEBUG_ENUNCIATE
  NSLog(@"Unable to write enum value (no valid value found).");
#endif
  return nil;
}
  [/#if]
#endif /* DEF_${typeName}_M */
[/#macro]