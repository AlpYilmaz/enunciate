[#ftl]
[#--

    Copyright Â© 2006-2016 Web Cohesion (info@webcohesion.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

--]
[#-- @ftlvariable name="resource_method" type="java.lang.String" --]
[#-- @ftlvariable name="resource_url" type="java.lang.String" --]
[#-- @ftlvariable name="slug" type="java.lang.String" --]
[#-- @ftlvariable name="filename" type="java.lang.String" --]
[#-- @ftlvariable name="input_element_name" type="java.lang.String" --]
[#-- @ftlvariable name="output_element_name" type="java.lang.String" --]
<p>
  The Objective C module generates the source code for the Objective C classes and (de)serialization
  functions that can be used in conjunction with <a href="http://xmlsoft.org/">libxml2</a> to (de)serialize
  the REST resources as they are represented as XML data.
</p>

<p>
  The generated Objective C source code depends on the <a href="http://xmlsoft.org/html/libxml-xmlreader.html">XML Reader API</a>
  and the <a href="http://xmlsoft.org/html/libxml-xmlwriter.html">XML Writer API</a> as well as the base OpenStep foundation classes.
</p>

[#if output_element_name??]
<div class="panel panel-default">
  <div class="panel-heading">Objective C Example</div>
  <div class="panel-body">
    <pre class="prettyprint lang-c">
#import &lt;${slug}.h&gt;
//...

[#if input_element_name??]
${input_element_name} *requestElement = [[${input_element_name} alloc] init];
NSData *requestData; //data holding the XML for the request.
[/#if]
${output_element_name} *responseElement;
NSData *responseData; //data holding the XML from the response.
NSURL *baseURL = ...; //the base url including the host and subpath.
NSURL *url = [NSURL URLWithString: @"${resource_url}" relativeToURL: baseURL];
NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url];
NSURLResponse *response = nil;
NSError *error = NULL;
[request setHTTPMethod: @"${resource_method}"];
[#if input_element_name??]
[request setValue:@"application/xml" forHTTPHeaderField:@"Content-Type"];  

//set up the ${input_element_name}...

requestData = [requestElement writeToXML];
[request setHTTPBody: requestData];
[/#if]

//this example uses a synchronous request,
//but you'll probably want to use an asynchronous call
responseData = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
${output_element_name} *responseElement = [${output_element_name} readFromXML: responseData];
[responseElement retain];

//handle the response as needed...
    </pre>
  </div>
</div>
[/#if]