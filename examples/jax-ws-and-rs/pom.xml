<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.webcohesion.enunciate</groupId>
    <artifactId>enunciate-examples</artifactId>
    <version>2.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>enunciate-examples-jax-ws-and-rs</artifactId>
  <name>Enunciate - JAX-WS and JAX-RS Example Project</name>
  <description>Enunciate Example: JAX-WS (SOAP) + JAX-RS (REST)</description>
  <packaging>war</packaging>

  <build>
    <plugins>
      <!--<plugin>-->
        <!--<groupId>org.apache.maven.plugins</groupId>-->
        <!--<artifactId>maven-enforcer-plugin</artifactId>-->
        <!--<executions>-->
          <!--<execution>-->
            <!--<id>require.gmcs.or.skip</id>-->
            <!--<phase>validate</phase>-->
            <!--<goals>-->
              <!--<goal>enforce</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--<rules>-->
                <!--<requireProperty>-->
                  <!--<property>gmcs.executable</property>-->
                  <!--<message>In order to run the jaxws-ri integration tests, you must have Mono installed.-->
                    <!--First install Mono for your platform. (See http://mono-project.com/Start and note there's a Windows version of Mono, too.)-->
                    <!--Then, define a profile in your settings.xml file that defines the path to your 'gmcs' executable in the property 'gmcs.executable'.-->
                    <!--If you just want to run the Java tests without running the C# tests, set the value of the property 'gmcs.executable' to be 'true'.-->
                  <!--</message>-->
                <!--</requireProperty>-->
              <!--</rules>-->
            <!--</configuration>-->
          <!--</execution>-->
          <!--<execution>-->
            <!--<id>require.gcc.or.skip</id>-->
            <!--<phase>validate</phase>-->
            <!--<goals>-->
              <!--<goal>enforce</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--<rules>-->
                <!--<requireProperty>-->
                  <!--<property>gcc.executable</property>-->
                  <!--<message>In order to run the jaxws-ri integration testse, you must have gcc installed along with libxml and gnustep.-->
                    <!--Define a profile in your settings.xml file that defines the path to your 'gcc'-->
                    <!--executable in the property 'gcc.executable'. Also set a property named 'libxml.config.executable' that-->
                    <!--specifies the executable that exposes your libxml compiler flags and library includes.-->
                    <!--Also set a property named 'gnustep.config.executable' that specifies the executable that exposes your gnustep compiler flags and library-->
                    <!--includes.-->
                    <!--If you just want to skip the Objective C tests, set the value of the property 'gcc.executable' to be 'true'.-->
                    <!--(And don't ask any questions about why that works. Maven mess.)-->
                  <!--</message>-->
                <!--</requireProperty>-->
              <!--</rules>-->
            <!--</configuration>-->
          <!--</execution>-->
        <!--</executions>-->
      <!--</plugin>-->
      <plugin>
        <groupId>com.webcohesion.enunciate</groupId>
        <artifactId>enunciate-maven-plugin</artifactId>
        <version>${enunciate.version}</version>
        <executions>
          <execution>
            <id>assemble</id>
            <goals>
              <goal>assemble</goal>
            </goals>
            <!--<configuration>-->
              <!--<addJavaClientSourcesToTestClasspath>true</addJavaClientSourcesToTestClasspath>-->
              <!--<exports>-->
                <!--<csharp.assembly>${project.build.directory}/cstests/full.dll</csharp.assembly>-->
              <!--</exports>-->
            <!--</configuration>-->
          </execution>
          <!--<execution>-->
            <!--<id>install-and-deploy</id>-->
            <!--<goals>-->
              <!--<goal>install-artifact</goal>-->
              <!--<goal>deploy-artifact</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--<enunciateArtifactId>jaxws.client.library</enunciateArtifactId>-->
            <!--</configuration>-->
          <!--</execution>-->
        </executions>
      </plugin>
      <!--<plugin>-->
        <!--<groupId>org.apache.maven.plugins</groupId>-->
        <!--<artifactId>maven-release-plugin</artifactId>-->
        <!--<version>2.1</version>-->
        <!--<configuration>-->
          <!--&lt;!&ndash;for testing out the release plugin&ndash;&gt;-->
          <!--<tagBase>https://svn.codehaus.org/enunciate/tags/</tagBase>-->
        <!--</configuration>-->
      <!--</plugin>-->
      <!--<plugin>-->
        <!--<groupId>org.codehaus.mojo</groupId>-->
        <!--<artifactId>exec-maven-plugin</artifactId>-->
        <!--<version>1.1.1</version>-->
        <!--<executions>-->
          <!--<execution>-->
            <!--<id>compile-cs</id>-->
            <!--<phase>test-compile</phase>-->
            <!--<goals>-->
              <!--<goal>exec</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--&lt;!&ndash;compile the nunit tests&ndash;&gt;-->
              <!--<executable>${gmcs.executable}</executable>-->
              <!--<skip>${gmcs.executable}</skip>-->
              <!--<arguments>-->
                <!--<argument>${project.build.testSourceDirectory}/../cs/TestCSharpClient.cs</argument>-->
                <!--<argument>/out:${project.build.directory}/cstests/fulltests.exe</argument>-->
                <!--<argument>/target:exe</argument>-->
                <!--<argument>/r:System.Web.Services</argument>-->
                <!--<argument>/r:${project.build.directory}/cstests/full.dll</argument>-->
              <!--</arguments>-->
              <!--<workingDirectory>${project.build.directory}</workingDirectory>-->
            <!--</configuration>-->
          <!--</execution>-->
          <!--<execution>-->
            <!--<id>nunit</id>-->
            <!--<phase>integration-test</phase>-->
            <!--<goals>-->
              <!--<goal>exec</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--&lt;!&ndash;compile the nunit tests&ndash;&gt;-->
              <!--<executable>mono</executable>-->
              <!--<skip>${gmcs.executable}</skip>-->
              <!--<arguments>-->
                <!--<argument>${project.build.directory}/cstests/fulltests.exe</argument>-->
              <!--</arguments>-->
              <!--<workingDirectory>${project.build.directory}</workingDirectory>-->
            <!--</configuration>-->
          <!--</execution>-->
        <!--</executions>-->
      <!--</plugin>-->
      <!--<plugin>-->
        <!--<groupId>org.apache.maven.plugins</groupId>-->
        <!--<artifactId>maven-antrun-plugin</artifactId>-->
        <!--<executions>-->
          <!--<execution>-->
            <!--&lt;!&ndash;as part of the tests, we're going to make sure the c and obj-c code compiles.&ndash;&gt;-->
            <!--<id>compile-obj-c</id>-->
            <!--<phase>test-compile</phase>-->
            <!--<configuration>-->
              <!--<tasks>-->
                <!--<property name="gcc.executable" value="${gcc.executable}"/>-->
                <!--<property name="libxml.config.executable" value="${libxml.config.executable}"/>-->
                <!--<property name="gnustep.config.executable" value="${gnustep.config.executable}"/>-->
                <!--<property name="project.build.directory" value="${project.build.directory}"/>-->

                <!--<ant antfile="${basedir}/gcc-compile.xml">-->
                  <!--<target name="gcc"/>-->
                <!--</ant>-->
              <!--</tasks>-->
            <!--</configuration>-->
            <!--<goals>-->
              <!--<goal>run</goal>-->
            <!--</goals>-->
          <!--</execution>-->
        <!--</executions>-->
      <!--</plugin>-->
      <!-- skip unit test run, tests to be executed during integration-test -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
        <!--<executions>-->
          <!--<execution>-->
            <!--<id>surefire-it</id>-->
            <!--<phase>integration-test</phase>-->
            <!--<goals>-->
              <!--<goal>test</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--<skip>${skipTests}</skip>-->
            <!--</configuration>-->
          <!--</execution>-->
        <!--</executions>-->
      </plugin>
      <!--<plugin>-->
        <!--<groupId>org.codehaus.cargo</groupId>-->
        <!--<artifactId>cargo-maven2-plugin</artifactId>-->
        <!--<executions>-->
          <!--<execution>-->
            <!--<id>start-container</id>-->
            <!--<phase>pre-integration-test</phase>-->
            <!--<goals>-->
              <!--<goal>start</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--<wait>false</wait>-->
            <!--</configuration>-->
          <!--</execution>-->
          <!--<execution>-->
            <!--<id>stop-container</id>-->
            <!--<phase>post-integration-test</phase>-->
            <!--<goals>-->
              <!--<goal>stop</goal>-->
            <!--</goals>-->
          <!--</execution>-->
        <!--</executions>-->
        <!--<configuration>-->
          <!--<skip>${skipTests}</skip>-->
          <!--<container>-->
            <!--<containerId>tomcat5x</containerId>-->
            <!--<zipUrlInstaller>-->
              <!--<url>http://archive.apache.org/dist/tomcat/tomcat-5/v5.5.26/bin/apache-tomcat-5.5.26.zip</url>-->
              <!--<extractDir>${basedir}/cargo-installs</extractDir>-->
            <!--</zipUrlInstaller>-->
            <!--<append>false</append>-->
          <!--</container>-->
          <!--<deployables>-->
            <!--<deployable>-->
              <!--<properties>-->
                <!--<context>full</context>-->
              <!--</properties>-->
            <!--</deployable>-->
          <!--</deployables>-->
          <!--<configuration>-->
            <!--<properties>-->
              <!--&lt;!&ndash;<cargo.jvmargs>-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005</cargo.jvmargs>&ndash;&gt;-->
            <!--</properties>-->
            <!--<home>${project.build.directory}/tomcat5x</home>-->
          <!--</configuration>-->
        <!--</configuration>-->
      <!--</plugin>-->
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>com.webcohesion.enunciate</groupId>
      <artifactId>enunciate-core-annotations</artifactId>
      <version>${enunciate.version}</version>
    </dependency>

    <dependency>
      <groupId>com.sun.xml.ws</groupId>
      <artifactId>jaxws-rt</artifactId>
      <version>${jaxws-ri-rt.version}</version>
    </dependency>

    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-impl</artifactId>
      <version>${jaxb-impl.version}</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-jaxrs</artifactId>
      <version>${jackson1.version}</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-xc</artifactId>
      <version>${jackson1.version}</version>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>
      <artifactId>jersey-multipart</artifactId>
      <version>${jersey.version}</version>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>${servlet-api.version}</version>

      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>${joda-time.version}</version>
    </dependency>

    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>${commons-io.version}</version>
    </dependency>

    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
      <version>${commons-fileupload.version}</version>
    </dependency>

    <dependency>
      <groupId>org.httpunit</groupId>
      <artifactId>httpunit</artifactId>
      <version>${httpunit-version}</version>

      <scope>test</scope>
    </dependency>

  </dependencies>

</project>
