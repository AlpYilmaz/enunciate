[#ftl]
[#--

    Copyright Â© 2006-2016 Web Cohesion (info@webcohesion.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

--]
[#-- @ftlvariable name="baseUri" type="java.lang.String" --]
[#import "client-soap-header.fmt" as libCSharpSoapHeader/]
[#--template for the client-side endpoint interface.--]
[#macro writeEndpointInterface endpointInterface]
  [#-- @ftlvariable name="endpointInterface" type="com.webcohesion.enunciate.modules.jaxws.model.EndpointInterface" --]
namespace ${namespaceFor(endpointInterface)} {

  [#list endpointInterface.webMethods as webMethod]
    [#if !isFacetExcluded(webMethod)]
      [#list webMethod.webParameters as param]
        [#if param.header]
[@libCSharpSoapHeader.writeSoapHeaderType param=param endpointInterface=endpointInterface/]
        [/#if]
      [/#list]
      [#if webMethod.webResult.header]
[@libCSharpSoapHeader.writeSoapHeaderType param=webMethod.webResult endpointInterface=endpointInterface/]
      [/#if]
    [/#if]
  [/#list]

  /// <remarks>
  [#if endpointInterface.javaDoc??]
  ///  ${((endpointInterface.javaDoc.toString())!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n  ///  ")}
  [#else]
  ///  (no documentation provided)
  [/#if]
  /// </remarks>
  /// <summary>
  [#if endpointInterface.javaDoc??]
  ///  ${((endpointInterface.javaDoc.toString())!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n  ///  ")}
  [#else]
  ///  (no documentation provided)
  [/#if]
  /// </summary>
  [System.Web.Services.WebServiceBindingAttribute(Name="${endpointInterface.portTypeName}",Namespace="${endpointInterface.targetNamespace!""}")]
  public partial class ${endpointInterface.clientSimpleName} : System.Web.Services.Protocols.SoapHttpClientProtocol {

  [#list endpointInterface.webMethods as webMethod]
    [#if !isFacetExcluded(webMethod)]
      [#list webMethod.webParameters as param]
        [#if param.header]
    public ${param.elementName?cap_first}AsSoapHeaderFor${endpointInterface.clientSimpleName?cap_first} ${param.elementName?cap_first};
        [/#if]
      [/#list]
    [/#if]
  [/#list]
  [#if baseUri??]

    /// <summary>
    ///  Construct a ${endpointInterface.clientSimpleName} that points to the default endpoint ("${baseUri}${endpointInterface.path?substring(1)}").
    /// </summary>
    public ${endpointInterface.clientSimpleName}() {
      this.Url = "${baseUri}${endpointInterface.path?substring(1)}";
    }
  [/#if]

    /// <summary>
    ///  Construct a ${endpointInterface.clientSimpleName} that points to the endpoint at a specified host and port.
    /// </summary>
    /// <param name="host">The host of the endpoint.</param>
    /// <param name="port">The port of the endpoint.</param>
    public ${endpointInterface.clientSimpleName}(string host, int port) {
      UriBuilder builder = new UriBuilder("http://localhost:8080/${endpointInterface.path?substring(1)}");
      builder.Host = host;
      builder.Port = port;
      this.Url = builder.Uri.ToString();
    }

    /// <summary>
    ///  Construct a ${endpointInterface.clientSimpleName} that points to the specified endpoint.
    /// </summary>
    /// <param name="url">The URL of the endpoint.</param>
    public ${endpointInterface.clientSimpleName}(string url) {
      this.Url = url;
    }
  [#list endpointInterface.webMethods as webMethod]

    /// <summary>
    ///  ${(webMethod.docValue!"(no summary provided)")?chop_linebreak?html?replace("\n", "\n    ///  ")}
    /// </summary>
    [#list webMethod.webParameters as param]
      [#if !param.header]
    /// <param name="${param.clientSimpleName}">${(param.docValue!"(no parameter documentation provided)")?chop_linebreak?html?replace("\n", "\n    ///  ")}</param>
      [/#if]
    [/#list]
    /// <returns>${(webMethod.returnType.docComment!"(no returns documentation provided)")?chop_linebreak?html?replace("\n", "\n    ///  ")}</returns>
    [#if webMethod.javaDoc.throws??]
    /// <exception>${webMethod.javaDoc.throws?html?replace("\n", "\n    ///  ")}</exception>
    [/#if]
    [#assign isrpc=(webMethod.soapBindingStyle?string?lower_case = "rpc") /]
    [#if !isrpc]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute(Action="${webMethod.action}",Use=System.Web.Services.Description.SoapBindingUse.${webMethod.soapUse?string?lower_case?cap_first},ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.${webMethod.soapParameterStyle?string?lower_case?cap_first}[#if webMethod.oneWay],OneWay=true[/#if][#if requestDocumentQName(webMethod)??],RequestElementName="${requestDocumentQName(webMethod).localPart}",RequestNamespace="${requestDocumentQName(webMethod).namespaceURI}"[/#if][#if responseDocumentQName(webMethod)??],ResponseElementName="${responseDocumentQName(webMethod).localPart}",ResponseNamespace="${responseDocumentQName(webMethod).namespaceURI}"[/#if])]
      [#if !webMethod.webResult.void]
    [return:System.Xml.Serialization.XmlElementAttribute(ElementName="${webMethod.webResult.elementName}",Namespace="[#if webMethod.webResult.bare]${endpointInterface.targetNamespace!""}[#else]${webMethod.webResult.targetNamespace!""}[/#if]")]
      [/#if]
    [#else]
    [System.Web.Services.Protocols.SoapRpcMethodAttribute(Action="${webMethod.action}",Use=System.Web.Services.Description.SoapBindingUse.${webMethod.soapUse?string?lower_case?cap_first}[#if webMethod.oneWay],OneWay=true[/#if],RequestElementName="${webMethod.operationName}",RequestNamespace="${endpointInterface.targetNamespace!""}",ResponseElementName="${webMethod.operationName}",ResponseNamespace="${endpointInterface.targetNamespace!""}")]
      [#if !webMethod.webResult.void && !webMethod.webResult.header]
    [return:System.Xml.Serialization.SoapElementAttribute(ElementName="${webMethod.webResult.elementName}")]
      [/#if]
    [/#if]
    [#list webMethod.webParameters as param]
      [#if param.header]
    [System.Web.Services.Protocols.SoapHeaderAttribute("${param.elementName?cap_first}", Direction=System.Web.Services.Protocols.SoapHeaderDirection.[#if param.mode?string = "INOUT"]InOut[#elseif param.mode?string = "OUT"]Out[#else]In[/#if])]
      [/#if]
    [/#list]
    [#assign usecomma=false/]
    public [#if webMethod.webResult.header]void[#else]${listsAsArraysClassnameFor(webMethod.webResult)}[/#if] ${webMethod.clientSimpleName?cap_first}([#list webMethod.webParameters as param][#if !param.header][#if usecomma], [/#if][#assign usecomma=true/][#if isrpc][System.Xml.Serialization.SoapElementAttribute(ElementName="${param.elementName}")] [#else][System.Xml.Serialization.XmlElementAttribute(ElementName="${param.elementName}",Namespace="[#if param.implicitSchemaElement]${endpointInterface.targetNamespace!""}[/#if]")] [/#if]${classnameFor(param)} ${param.clientSimpleName}[/#if][/#list]) {
    [#assign usecomma=false/]
      object[] results = this.Invoke("${webMethod.clientSimpleName?cap_first}", new object[] { [#list webMethod.webParameters as param][#if !param.header][#if usecomma], [/#if][#assign usecomma=true/]${param.clientSimpleName}[/#if][/#list] });
    [#if !webMethod.webResult.void && !webMethod.webResult.header]
      return ((${listsAsArraysClassnameFor(webMethod.webResult)})(results[0]));
    [/#if]
    }
  [/#list]

  }
}
[/#macro]