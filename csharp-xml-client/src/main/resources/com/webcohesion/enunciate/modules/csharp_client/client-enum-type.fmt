[#ftl]
[#--

    Copyright Â© 2006-2016 Web Cohesion (info@webcohesion.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

--]
[#--template for the client-side simple type.--]
[#macro writeEnumType type]
[#-- @ftlvariable name="type" type="com.webcohesion.enunciate.modules.jaxb.model.EnumTypeDefinition" --]
namespace ${namespaceFor(type)} {

  /// <remarks>
  [#if type.javaDoc??]
  ///  ${((type.javaDoc.toString())!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n  ///  ")}
  [#else]
  ///  (no documentation provided)
  [/#if]
  /// </remarks>
  /// <summary>
  [#if type.javaDoc??]
  ///  ${((type.javaDoc.toString())!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n  ///  ")}
  [#else]
  ///  (no documentation provided)
  [/#if]
  /// </summary>
  [#if findRootElement(type)??]
  [System.Xml.Serialization.XmlRootAttribute(Namespace="${findRootElement(type).namespace!""}", ElementName="${findRootElement(type).name}")]
  [/#if]
  public enum ${type.clientSimpleName} {

    /// <summary>
    ///  Unspecified enum value.
    /// </summary>
    [System.Xml.Serialization.XmlEnumAttribute(Name="__NULL__")]
    [System.Xml.Serialization.SoapEnumAttribute(Name="__NULL__")]
    NULL[#if (type.getEnumValues()?size > 0)],[/#if]
  [#assign unknownQNameEnum=""/]
  [#list type.getEnumValues() as enumValue]
    [#if !isFacetExcluded(enumValue)]
    [#-- @ftlvariable name="constant" type="com.webcohesion.enunciate.javac.decorations.element.DecoratedVariableElement" --]

    /// <summary>
    ///  ${(enumValue.docComment!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n    ///  ")}
    /// </summary>
      [#if !(type.QNameEnum!false)]
    [System.Xml.Serialization.XmlEnumAttribute(Name="${enumValue.value?string}")]
    [System.Xml.Serialization.SoapEnumAttribute(Name="${enumValue.value?string}")]
      [#elseif !(enumValue.value??)]
        [#if enumValue.annotations["com.webcohesion.enunciate.metadata.ClientName"]??]
          [#assign unknownQNameEnum = enumValue.annotations["com.webcohesion.enunciate.metadata.ClientName"].value/]
        [#else]
          [#assign unknownQNameEnum = enumValue.name/]
        [/#if]
      [/#if]
      [#if enumValue.annotations["com.webcohesion.enunciate.metadata.ClientName"]??]${enumValue.annotations["com.webcohesion.enunciate.metadata.ClientName"].value}[#else]${enumValue.name}[/#if][#if enumValue_has_next],[/#if]
    [/#if]
  [/#list]
  }

  [#if type.QNameEnum!false]
  /// <remarks>
  /// Utility class for converting to/from the QNames associated with ${type.clientSimpleName}.
  /// </remarks>
  /// <summary>
  /// Utility class for converting to/from the QNames associated with ${type.clientSimpleName}.
  /// </summary>
  public static class ${type.clientSimpleName}QNameUtil {

    /// <summary>
    /// Get the known ${type.clientSimpleName} for a given QName. If the QName isn't a known QName, [#if unknownQNameEnum != ""]${type.clientSimpleName}.${unknownQNameEnum}[#else]${type.clientSimpleName}.NULL[/#if] will be returned.
    /// </summary>
    public static ${type.clientSimpleName} ConvertFromKnownQName(${classnameFor(type.enumBaseClass)} qname) {
      if (qname != null) {
    [#list type.getEnumValues() as enumValue]
      [#if !isFacetExcluded(enumValue)]
        [#if enumValue.value??]
          [#if !type.uriBaseType]
        if ("${enumValue.value.localPart}".Equals(qname.Name) && [#if enumValue.value.namespaceURI == ""]string.IsNullOrEmpty(qname.Namespace)[#else]"${enumValue.value.namespaceURI}".Equals(qname.Namespace)[/#if]) {
          [#else]
        if ("${enumValue.value.namespaceURI}${enumValue.value.localPart}".Equals(qname)) {
          [/#if]
          return ${type.clientSimpleName}.[#if enumValue.annotations["com.webcohesion.enunciate.metadata.ClientName"]??]${enumValue.annotations["com.webcohesion.enunciate.metadata.ClientName"].value}[#else]${enumValue.simpleName}[/#if];
        }
        [/#if]
      [/#if]
    [/#list]
      }
    [#if unknownQNameEnum != ""]
      return ${type.clientSimpleName}.${unknownQNameEnum};
    [#else]
      return ${type.clientSimpleName}.NULL;
    [/#if]
    }

    /// <summary>
    /// Convert the known ${type.clientSimpleName} to a QName. If [#if unknownQNameEnum != ""]${type.clientSimpleName}.${unknownQNameEnum}[#else]${type.clientSimpleName}.NULL[/#if], an ArgumentException will be thrown.
    /// </summary>
    public static ${classnameFor(type.enumBaseClass)} ConvertToKnownQName(${type.clientSimpleName} known) {
      switch (known) {
    [#list type.getEnumValues() as enumValue]
      [#if !isFacetExcluded(enumValue)]
        [#if enumValue.value??]
        case ${type.clientSimpleName}.[#if enumValue.annotations["com.webcohesion.enunciate.metadata.ClientName"]??]${enumValue.annotations["com.webcohesion.enunciate.metadata.ClientName"].value}[#else]${enumValue.simpleName}[/#if]:
          [#if !type.uriBaseType]
          return new System.Xml.XmlQualifiedName("${enumValue.value.localPart}", "${enumValue.value.namespaceURI}");
          [#else]
          return "${enumValue.value.namespaceURI}${enumValue.value.localPart}";
          [/#if]
        [/#if]
      [/#if]
    [/#list]
        default:
          throw new System.ArgumentException("No known QName for: " + known, "known");
      }
    }
  }
  [/#if]
}
[/#macro]