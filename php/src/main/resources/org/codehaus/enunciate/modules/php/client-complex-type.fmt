[#ftl]
[#--template for the client-side complex type.--]
[#macro createPhpObject newIdentifier currentIdentifier currentClass]
  [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean"]
  ${newIdentifier} = ${currentIdentifier};
  [#elseif currentClass == "Object"]
  ${newIdentifier} = (object) ${currentIdentifier};
  [#elseif currentClass == "Array"]
  ${newIdentifier} = ${currentIdentifier};
  [#else]
  ${newIdentifier} = new \${currentClass}(${currentIdentifier});
  [/#if]
[/#macro]
[#macro toPhpArray newIdentifier currentIdentifier currentClass]
  [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean" || currentClass == "Array"]
  ${newIdentifier} = ${currentIdentifier};
  [#elseif currentClass == "Object"]
  ${newIdentifier} = (array) ${currentIdentifier};
  [#else]
  ${newIdentifier} = ${currentIdentifier}->toArray();
  [/#if]
[/#macro] 
[#macro writeComplexType type]

  namespace ${moduleFor(type)} {

    // ${(type.javaDoc!"(no documentation provided)")?replace("\n", "\n  // ")}
    class ${simpleNameFor(type)} [#if !type.baseObject]extends \${classnameFor(type.superclass)} [/#if] {
    
    [#list type.attributes as attribute]
      // ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n    \\ ")}
      var ${r"$"}${attribute.clientSimpleName};
    [/#list]
    
    [#if type.value??]
      // ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n    \\ ")}
      var ${r"$"}${type.value.clientSimpleName};
    [#else]
      [#list type.elements as element]
      // ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n    \\ ")}
      var ${r"$"}${element.clientSimpleName};
      [/#list]
    [/#if]

      // constructs a ${simpleNameFor(type)} from a (parsed) JSON hash
      public function __construct(${r"$"}o = null) {
        if( ${r"$"}o ) {
          ${r"$"}this->initFromArray(${r"$"}o);
        }
      }
    
      // the json hash for this ${simpleNameFor(type)}
      public function toArray() {
        [#if type.baseObject]
        ${r"$"}a = array();
        [#else]
        ${r"$"}a = parent::toArray();
        [/#if]
    [#list type.attributes as attribute]
        if( ${r"$"}this->${attribute.clientSimpleName} ) {
          [@toPhpArray '        ${r"$"}a["${attribute.jsonMemberName}"]' '${r"$"}this->${attribute.clientSimpleName}' '${classnameFor(attribute)}' /]
        }
    [/#list]
    [#if type.value??]
        if( ${r"$"}this->${type.value.clientSimpleName} ) {
          [@toPhpArray '        ${r"$"}a["${type.value.jsonMemberName}"]' '${r"$"}this->${type.value.clientSimpleName}' '${classnameFor(type.value)}' /]
        }
    [#else]
      [#list type.elements as element]
        [#if element.collectionType]
        if( ${r"$"}this->${element.clientSimpleName} ) {
          ${r"$"}ab = array();
          foreach( ${r"$"}this->${element.clientSimpleName} as ${r"$"}x ) {
            [@toPhpArray '          ${r"$"}ab[]' '${r"$"}x' '${classnameFor(element.collectionItemType)}' /]
          }
          ${r"$"}a['${element.jsonMemberName}'] = ${r"$"}ab;
        }
        [#else]
        if( ${r"$"}this->${element.clientSimpleName} ) {
          [@toPhpArray '        ${r"$"}a["${element.jsonMemberName}"]' '${r"$"}this->${element.clientSimpleName}' '${classnameFor(element)}' /]
        }
        [/#if]
      [/#list]
    [/#if]
        return ${r"$"}a;
      }
      
    [#if type.baseObject]
      // the json (string form) for this ${simpleNameFor(type)}
      public function toJson() {
        return json_encode(${r"$"}this->toArray());
      }
    [/#if]

      // initializes this ${simpleNameFor(type)} with a json hash
      public function initFromArray(${r"$"}o) {
    [#if !type.baseObject]
        parent::initFromArray(${r"$"}o);
    [/#if]
    [#list type.attributes as attribute]   
        if( isset(${r"$"}o['${attribute.jsonMemberName}']) ) {
          [@createPhpObject '        ${r"$"}this->${attribute.clientSimpleName}' '${r"$"}o["${attribute.jsonMemberName}"]' '${classnameFor(attribute)}' /]
        }
    [/#list]
    [#if type.value??]
        if( isset(${r"$"}o['${type.value.jsonMemberName}']) ) {
          [@createPhpObject '        ${r"$"}this->${type.value.clientSimpleName}' '${r"$"}o["${type.value.jsonMemberName}"]' '${classnameFor(type.value)}' /]
        }
    [#else]
      [#list type.elements as element]
        [#if element.collectionType]
        ${r"$"}this->${element.clientSimpleName} = array();
        if( isset(${r"$"}o['${element.jsonMemberName}']) ) {
          foreach( ${r"$"}o['${element.jsonMemberName}'] as $x ) {
            [@createPhpObject '          ${r"$"}this->${element.clientSimpleName}[]' '${r"$"}x' '${classnameFor(element.collectionItemType)}' /]
          }
        }
        [#else]
        if( ${r"$"}o['${element.jsonMemberName}'] ) {
          [@createPhpObject '        ${r"$"}this->${element.clientSimpleName}' '${r"$"}o["${element.jsonMemberName}"]' '${classnameFor(element)}' /]
        }
        [/#if]
      [/#list]
    [/#if]
      }
    
    }
    
  }

[/#macro]