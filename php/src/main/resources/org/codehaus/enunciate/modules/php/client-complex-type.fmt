[#ftl]
[#--template for the client-side complex type.--]
[#macro createPhpJsonObject currentIdentifier currentClass]
  [#compress]
    [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean" || currentClass == "Array"]
      ${currentIdentifier}
    [#elseif currentClass == "Object"]
      (object) ${currentIdentifier}
    [#else]
      new \${currentClass}(${currentIdentifier})
    [/#if]
  [/#compress]
[/#macro]
[#macro createPhpXmlObject currentClass]
  [#compress]
    [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean" || currentClass == "Array"]
    $xml->value
    [#elseif currentClass == "Object"]
    new \SimpleXMLElement($xml)
    [#else]
    new \${currentClass}($xml)
    [/#if]
  [/#compress]
[/#macro]
[#macro toPhpArray newIdentifier currentIdentifier currentClass]
  [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean" || currentClass == "Array"]
${newIdentifier} = ${currentIdentifier};
  [#elseif currentClass == "Object"]
${newIdentifier} = (array) ${currentIdentifier};
  [#else]
${newIdentifier} = ${currentIdentifier}->toArray();
  [/#if]
[/#macro] 
[#macro writeComplexType type]

namespace ${moduleFor(type)};

/**
 * ${(type.javaDoc!"(no documentation provided)")?replace("\n", "\n     * ")}
 */
class ${simpleNameFor(type)}[#if !type.baseObject] extends \${classnameFor(type.superclass)}[/#if]
{
    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]

    /**
     * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(attribute)}
     */
    private $${attribute.clientSimpleName};
      [/#if]
    [/#list]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]

    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(type.value)}
     */
    private $${type.value.clientSimpleName};
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]

    /**
     * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(element)}
     */
    private $${element.clientSimpleName};
        [/#if]
      [/#list]
    [/#if]

    /**
     * Constructs a ${simpleNameFor(type)} from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $this->initFromReader($o);
        }
    }

    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]
    /**
     * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(attribute)}
     */
    public function get${attribute.clientSimpleName?cap_first}()
    {
        return $this->${attribute.clientSimpleName};
    }

    /**
     * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(attribute)} $${attribute.clientSimpleName}
     */
    public function set${attribute.clientSimpleName?cap_first}($${attribute.clientSimpleName})
    {
        $this->${attribute.clientSimpleName} = $${attribute.clientSimpleName};
    }
      [/#if]
    [/#list]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(type.value)}
     */
    public function get${type.value.clientSimpleName?cap_first}()
    {
        return $this->${type.value.clientSimpleName};
    }

    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(type.value)} $${type.value.clientSimpleName}
     */
    public function set${type.value.clientSimpleName?cap_first}($${type.value.clientSimpleName})
    {
        $this->${type.value.clientSimpleName} = $${type.value.clientSimpleName};
    }
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
    /**
     * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(element)}
     */
    public function get${element.clientSimpleName?cap_first}()
    {
        return $this->${element.clientSimpleName};
    }

    /**
     * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(element)} $${element.clientSimpleName}
     */
    public function set${element.clientSimpleName?cap_first}($${element.clientSimpleName})
    {
        $this->${element.clientSimpleName} = $${element.clientSimpleName};
    }
        [/#if]
      [/#list]
    [/#if]   
    /**
     * Returns the associative array for this ${simpleNameFor(type)}
     *
     * @return array
     */
    public function toArray()
    {
    [#if type.baseObject]
        $a = array();
    [#else]
        $a = parent::toArray();
    [/#if]
    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]
        if ($this->${attribute.clientSimpleName}) {
            [@toPhpArray '            $a["${attribute.jsonMemberName}"]' '$this->${attribute.clientSimpleName}' '${classnameFor(attribute)}' /]
        }
      [/#if]
    [/#list]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
        if ($this->${type.value.clientSimpleName}) {
            [@toPhpArray '            $a["${type.value.jsonMemberName}"]' '$this->${type.value.clientSimpleName}' '${classnameFor(type.value)}' /]
        }
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
          [#if element.collectionType]
        if ($this->${element.clientSimpleName}) {
            $ab = array();
            foreach ($this->${element.clientSimpleName} as $i => $x) {
                [@toPhpArray '                $ab[$i]' '$x' '${classnameFor(element.collectionItemType)}' /]
            }
            $a['${element.jsonMemberName}'] = $ab;
        }
          [#else]
        if ($this->${element.clientSimpleName}) {
            [@toPhpArray '            $a["${element.jsonMemberName}"]' '$this->${element.clientSimpleName}' '${classnameFor(element)}' /]
        }
          [/#if]
        [/#if]
      [/#list]
    [/#if]
        return $a;
    }

    [#if type.baseObject]
    /**
     * Returns the JSON string for this ${simpleNameFor(type)}
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    [/#if]

    /**
     * Initializes this ${simpleNameFor(type)} from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
    [#if !type.baseObject]
        parent::initFromArray($o);
    [/#if]
    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]
        if (isset($o['${attribute.jsonMemberName}'])) {
            $this->${attribute.clientSimpleName} = [@createPhpJsonObject '$o["${attribute.jsonMemberName}"]' '${classnameFor(attribute)}' /];
        }
      [/#if]
    [/#list]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
        if (isset($o['${type.value.jsonMemberName}'])) {
            $this->${type.value.clientSimpleName} = [@createPhpJsonObject '$o["${type.value.jsonMemberName}"]' '${classnameFor(type.value)}' /];
        }
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
          [#if element.collectionType]
        $this->${element.clientSimpleName} = array();
        if (isset($o['${element.jsonMemberName}'])) {
            foreach ($o['${element.jsonMemberName}'] as $i => $x) {
                $this->${element.clientSimpleName}[$i] = [@createPhpJsonObject '$x' '${classnameFor(element.collectionItemType)}' /];
            }
        }
          [#else]
        if (isset($o['${element.jsonMemberName}'])) {
            $this->${element.clientSimpleName} = [@createPhpJsonObject '$o["${element.jsonMemberName}"]' '${classnameFor(element)}' /];
        }
          [/#if]
        [/#if]
      [/#list]
    [/#if]
    }

    /**
     * Initializes this ${simpleNameFor(type)} from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
    [#if type.elements?size > 0]
        $empty = $xml->isEmptyElement;
    [/#if]
    [#if !type.baseObject]
        parent::initFromReader($xml);
    [/#if]
    [#if type.attributes?size > 0]

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
      [#list type.attributes as attribute]
        [#if !isFacetExcluded(attribute)]
                if (($xml->localName == '${attribute.name}') && ([#if ((attribute.namespace??) && (attribute.namespace != ""))]$xml->namespaceURI == '${attribute.namespace}'[#else]empty($xml->namespaceURI)[/#if])) {
                    $this->${attribute.clientSimpleName} = [@createPhpXmlObject '${classnameFor(attribute)}' /];
                }
        [/#if]
      [/#list]
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }
    [/#if]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]

        $this->${type.value.clientSimpleName} = [@createPhpXmlObject '${classnameFor(type.value)}' /];
      [/#if]
    [#elseif type.elements?size > 0]

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != XMLReader::END_ELEMENT) {
                if ($xml->nodeType != XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
          [#if element.wrapped]
                else if (($xml->localName == '${element.wrapperName}') && ([#if ((element.wrapperNamespace??) && (element.wrapperNamespace != ""))]$xml->namespaceURI == '${element.wrapperNamespace}'[#else]empty($xml->namespaceURI)[/#if]) && (!$xml->isEmptyElement)) {
                    $xml->read();
                    while ($xml->nodeType != XMLReader::END_ELEMENT) {
                        if ($xml->nodeType != XMLReader::ELEMENT) {
                            //no-op: skip any insignificant whitespace, comments, etc. in the wrapper
                        }
          [/#if]
          [#list element.choices as choice]
                else if (($xml->localName == '${choice.name}') && ([#if ((choice.namespace??) && (choice.namespace != ""))]$xml->namespaceURI == '${choice.namespace}'[#else]empty($xml->namespaceURI)[/#if])) {
                    $child = [@createPhpXmlObject '${classnameFor(choice.bareAccessorType)}' /];
            [#if element.collectionType]
                    if (!isset($this->${element.clientSimpleName})) {
                        $this->${element.clientSimpleName} = array();
                    }
                    array_push($this->${element.clientSimpleName}, $child);
            [#else]
                    $this->${element.clientSimpleName} = $child;
            [/#if]
                }
          [/#list]
          [#if element.wrapped]
                        $xml->read();
                    }
                }
          [/#if]
        [/#if]
      [/#list]
                $xml->read(); //advance the reader.
            }
        }
    [/#if]
    }
}
[/#macro]