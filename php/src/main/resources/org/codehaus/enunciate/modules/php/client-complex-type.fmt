[#ftl]
[#--template for the client-side complex type.--]
[#macro createPhpJsonObject currentIdentifier currentClass]
  [#compress]
    [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean" || currentClass == "Array"]
      ${currentIdentifier}
    [#elseif currentClass == "Object"]
      (object) ${currentIdentifier}
    [#else]
      new \${currentClass}(${currentIdentifier})
    [/#if]
  [/#compress]
[/#macro]
[#macro createPhpXmlObject targetVariable currentClass indent]
    [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean" || currentClass == "Array"]
${indent}${targetVariable} = '';
${indent}while ($xml->read() && $xml->hasValue) {
${indent}    ${targetVariable} = ${targetVariable} . $xml->value;
${indent}}
    [#elseif currentClass == "Object"]
${indent}${targetVariable} = new \SimpleXMLElement($xml);
    [#else]
${indent}${targetVariable} = new \${currentClass}($xml);
    [/#if]
[/#macro]
[#macro toPhpJsonInstance newIdentifier currentIdentifier currentClass indent]
  [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean" || currentClass == "Array"]
${indent}${newIdentifier} = ${currentIdentifier};
  [#elseif currentClass == "Object"]
${indent}${newIdentifier} = (array) ${currentIdentifier};
  [#else]
${indent}${newIdentifier} = ${currentIdentifier}->toArray();
  [/#if]
[/#macro] 
[#macro toPhpXmlInstance currentIdentifier currentClass indent]
    [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean" || currentClass == "Array"]
${indent}$writer->text(${currentIdentifier});
    [#else]
${indent}${currentIdentifier}->writeXmlContents($writer);
    [/#if]
[/#macro]
[#macro writeComplexType type]

namespace ${moduleFor(type)};

/**
 * ${(type.javaDoc!"(no documentation provided)")?replace("\n", "\n     * ")}
 */
class ${simpleNameFor(type)}[#if !type.baseObject] extends \${classnameFor(type.superclass)}[/#if]
{
    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]

    /**
     * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(attribute)}
     */
    private $${attribute.clientSimpleName};
      [/#if]
    [/#list]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]

    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(type.value)}
     */
    private $${type.value.clientSimpleName};
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]

    /**
     * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(element)}
     */
    private $${element.clientSimpleName};
        [/#if]
      [/#list]
    [/#if]
    [#if type.hasAnyAttribute]

    /**
     * Additional attributes.
     */
    private $otherAttributes = array();
    [/#if]
    [#if type.anyElement??]

    /**
     * ${(type.anyElement.javaDoc.return!type.anyElement.docValue!"Additional elements.")?chop_linebreak?replace("\n", "\n   * ")}
     */
    private $${type.anyElement.clientSimpleName} = array();
    [/#if]

    /**
     * Constructs a ${simpleNameFor(type)} from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]
    /**
     * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(attribute)}
     */
    public function get${attribute.clientSimpleName?cap_first}()
    {
        return $this->${attribute.clientSimpleName};
    }

    /**
     * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(attribute)} $${attribute.clientSimpleName}
     */
    public function set${attribute.clientSimpleName?cap_first}($${attribute.clientSimpleName})
    {
        $this->${attribute.clientSimpleName} = $${attribute.clientSimpleName};
    }
      [/#if]
    [/#list]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(type.value)}
     */
    public function get${type.value.clientSimpleName?cap_first}()
    {
        return $this->${type.value.clientSimpleName};
    }

    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(type.value)} $${type.value.clientSimpleName}
     */
    public function set${type.value.clientSimpleName?cap_first}($${type.value.clientSimpleName})
    {
        $this->${type.value.clientSimpleName} = $${type.value.clientSimpleName};
    }
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
    /**
     * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(element)}
     */
    public function get${element.clientSimpleName?cap_first}()
    {
        return $this->${element.clientSimpleName};
    }

    /**
     * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(element)} $${element.clientSimpleName}
     */
    public function set${element.clientSimpleName?cap_first}($${element.clientSimpleName})
    {
        $this->${element.clientSimpleName} = $${element.clientSimpleName};
    }
        [/#if]
      [/#list]
    [/#if]   
    /**
     * Returns the associative array for this ${simpleNameFor(type)}
     *
     * @return array
     */
    public function toArray()
    {
    [#if type.baseObject]
        $a = array();
    [#else]
        $a = parent::toArray();
    [/#if]
    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]
        if ($this->${attribute.clientSimpleName}) {
            [@toPhpJsonInstance '$a["${attribute.jsonMemberName}"]' '$this->${attribute.clientSimpleName}' '${classnameFor(attribute)}' '            ' /]
        }
      [/#if]
    [/#list]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
        if ($this->${type.value.clientSimpleName}) {
            [@toPhpJsonInstance '$a["${type.value.jsonMemberName}"]' '$this->${type.value.clientSimpleName}' '${classnameFor(type.value)}' '            '/]
        }
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
          [#if element.collectionType]
        if ($this->${element.clientSimpleName}) {
            $ab = array();
            foreach ($this->${element.clientSimpleName} as $i => $x) {
                [@toPhpJsonInstance '$ab[$i]' '$x' '${classnameFor(element.collectionItemType)}' '                '/]
            }
            $a['${element.jsonMemberName}'] = $ab;
        }
          [#else]
        if ($this->${element.clientSimpleName}) {
            [@toPhpJsonInstance '$a["${element.jsonMemberName}"]' '$this->${element.clientSimpleName}' '${classnameFor(element)}' '            ' /]
        }
          [/#if]
        [/#if]
      [/#list]
    [/#if]
        return $a;
    }

    [#if type.baseObject]
    /**
     * Returns the JSON string for this ${simpleNameFor(type)}
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    [/#if]

    /**
     * Initializes this ${simpleNameFor(type)} from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
    [#if !type.baseObject]
        parent::initFromArray($o);
    [/#if]
    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]
        if (isset($o['${attribute.jsonMemberName}'])) {
            $this->${attribute.clientSimpleName} = [@createPhpJsonObject '$o["${attribute.jsonMemberName}"]' '${classnameFor(attribute)}' /];
        }
      [/#if]
    [/#list]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
        if (isset($o['${type.value.jsonMemberName}'])) {
            $this->${type.value.clientSimpleName} = [@createPhpJsonObject '$o["${type.value.jsonMemberName}"]' '${classnameFor(type.value)}' /];
        }
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
          [#if element.collectionType]
        $this->${element.clientSimpleName} = array();
        if (isset($o['${element.jsonMemberName}'])) {
            foreach ($o['${element.jsonMemberName}'] as $i => $x) {
                $this->${element.clientSimpleName}[$i] = [@createPhpJsonObject '$x' '${classnameFor(element.collectionItemType)}' /];
            }
        }
          [#else]
        if (isset($o['${element.jsonMemberName}'])) {
            $this->${element.clientSimpleName} = [@createPhpJsonObject '$o["${element.jsonMemberName}"]' '${classnameFor(element)}' /];
        }
          [/#if]
        [/#if]
      [/#list]
    [/#if]
    }
  [#if type.baseObject]

    /**
     * Initializes this ${simpleNameFor(type)} from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
      [#if type.hasAnyAttribute]
                    $attr = array();
                    $attr[$xml->localName] = $xml->value;
                    array_push($this->$otherAttributes, $attr);
      [#else]
                    //skip unknown attributes...
      [/#if]
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]

        if (!$empty) {
[@createPhpXmlObject '$this->${type.value.clientSimpleName}' '${classnameFor(type.value)}' '            '/]
        }
      [/#if]
    [#else]

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$xml->isEmptyElement && !$this->setKnownChildElement($xml)) {
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
      [#if type.anyElement??]
                    $dom = new \DOMDocument();
                    $nodeFactory = $dom;
                    $dom->formatOutput = true;

                    $e = $nodeFactory->createElementNS($xml->namespaceURI, $xml->localName);
                    $dom->appendChild($e);
                    if ($xml->hasAttributes) {
                        $moreAttributes = $xml->moveToFirstAttribute();
                        while ($moreAttributes) {
                            $e->setAttributeNS($xml->namespaceURI, $xml->localName, $xml->value);
                            $moreAttributes = $xml->moveToNextAttribute();
                        }
                    }
                    $dom = $e;

                    //create any child elements...
                    while ($xml->read() && $xml->nodeType != \XMLReader::END_ELEMENT && $xml->localName != $n && $xml->namespaceURI != $ns) {
                        if ($xml->nodeType == XMLReader::ELEMENT) {
                            $e = $nodeFactory->createElementNS($xml->namespaceURI, $xml->localName);
                            $dom->appendChild($e);
                            if ($xml->hasAttributes) {
                                $moreAttributes = $xml->moveToFirstAttribute();
                                while ($moreAttributes) {
                                    $e->setAttributeNS($xml->namespaceURI, $xml->localName, $xml->value);
                                    $moreAttributes = $xml->moveToNextAttribute();
                                }
                            }
                            $dom = $e;
                        }
                        else if ($xml->nodeType == XMLReader::TEXT) {
                            $dom->textContent = $xml->value;
                        }
                        else if ($xml->nodeType == XMLReader::END_ELEMENT) {
                            $dom = $dom->parentNode;
                        }
                    }
                    array_push($this->${type.anyElement.clientSimpleName}, $nodeFactory);
      [#else]
                    //skip the unknown element
                    while ($xml->nodeType != \XMLReader::END_ELEMENT && $xml->localName != $n && $xml->namespaceURI != $ns) {
                        $xml->read();
                    }
      [/#if]
                }
                $xml->read(); //advance the reader.
            }
        }
    [/#if]
    }

  [/#if]

    /**
     * Sets a known child element of ${simpleNameFor(type)} from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
    [#if type.elements?size > 0]
      [#assign writeElse=false/]
      [#if !type.baseObject]
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        [#assign writeElse=true/]
      [#else]
        $happened = false;
      [/#if]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
          [#if element.wrapped]
        [#if writeElse]else [/#if]if (($xml->localName == '${element.wrapperName}') && ([#if ((element.wrapperNamespace??) && (element.wrapperNamespace != ""))]$xml->namespaceURI == '${element.wrapperNamespace}'[#else]empty($xml->namespaceURI)[/#if]) && (!$xml->isEmptyElement)) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc. in the wrapper
                }
            [#assign writeElse=false/]
          [/#if]
          [#list element.choices as choice]
        [#if writeElse]else [/#if]if (($xml->localName == '${choice.name}') && ([#if ((choice.namespace??) && (choice.namespace != ""))]$xml->namespaceURI == '${choice.namespace}'[#else]empty($xml->namespaceURI)[/#if])) {
[@createPhpXmlObject '$child' '${classnameFor(choice.bareAccessorType)}' '            '/]
            [#if element.collectionType]
            if (!isset($this->${element.clientSimpleName})) {
                $this->${element.clientSimpleName} = array();
            }
            array_push($this->${element.clientSimpleName}, $child);
            [#else]
            $this->${element.clientSimpleName} = $child;
            [/#if]
            $happened = true;
        }
            [#assign writeElse=true/]
          [/#list]
          [#if element.wrapped]
                $xml->read();
            }
            $happened = true;
        }
          [/#if]
        [/#if]
      [/#list]
        return $happened;
    [#else]
        return false;
    [/#if]
    }

    /**
     * Sets a known attribute of ${simpleNameFor(type)} from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
    [#assign writeElse=false/]
    [#if !type.baseObject]
        if (parent::setKnownAttribute($xml)) {
            return true;
        }
      [#assign writeElse=true/]
    [/#if]
    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]
        [#if writeElse]else [/#if]if (($xml->localName == '${attribute.name}') && ([#if ((attribute.namespace??) && (attribute.namespace != ""))]$xml->namespaceURI == '${attribute.namespace}'[#else]empty($xml->namespaceURI)[/#if])) {
            $this->${attribute.clientSimpleName} = $xml->value;
            return true;
        }
      [/#if]
    [/#list]

        return false;
    }
    [#if findRootElement(type)??]
      [#assign rootElement=findRootElement(type)/]
      [#assign localReferencedNamespaces=referencedNamespaces(rootElement)/]

    /**
     * Writes this ${simpleNameFor(type)} to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function toXml($writer)
    {
        $writer->startElementNS([#if ((rootElement.namespace??) && (rootElement.namespace != ""))]'${prefix(rootElement.namespace)}'[#else]null[/#if], '${rootElement.name}', null);
      [#list localReferencedNamespaces as referencedNamespace]
        [#if ((referencedNamespace??) && (referencedNamespace?length > 0))]
        $writer->writeAttributeNs('xmlns', '${prefix(referencedNamespace)}', null, '${referencedNamespace}');
        [/#if]
      [/#list]
        $this->writeXmlContents($writer);
        $writer->endElement();
    }
    [/#if]

    /**
     * Writes the contents of this ${simpleNameFor(type)} to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
    [#if type.attributes?size > 0]
      [#list type.attributes as attribute]
        [#if !isFacetExcluded(attribute)]
        if ($this->${attribute.clientSimpleName}) {
            $writer->writeAttribute('[#if ((attribute.namespace??) && (attribute.namespace != ""))]${prefix(attribute.namespace)}:[/#if]${attribute.name}', $this->${attribute.clientSimpleName});
        }
        [/#if]
      [/#list]
    [/#if]
    [#if !type.baseObject]
        parent::writeXmlContents($writer);
    [/#if]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
        if ($this->${type.value.clientSimpleName}) {
            $writer->text($this->${type.value.clientSimpleName});
        }
      [/#if]
    [#elseif type.elements?size > 0]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
          [#if element.collectionType]
        if ($this->${element.clientSimpleName}) {
            [#if element.wrapped]
            $writer->startElementNs([#if ((element.wrapperNamespace??) && (element.wrapperNamespace != ""))]'${prefix(element.wrapperNamespace)}'[#else]null[/#if], '${element.wrapperName}', null);
            [/#if]
            foreach ($this->${element.clientSimpleName} as $i => $x) {
              [#if element.choices?size > 1]
                [#assign writeElse=false/]
                [#list element.choices as choice]
                [#if writeElse]else [/#if]if ($x instanceof \${classnameFor(choice.bareAccessorType)}) {
                    $writer->startElementNs([#if ((choice.namespace??) && (choice.namespace != ""))]'${prefix(choice.namespace)}'[#else]null[/#if], '${choice.name}', null);
                    [@toPhpXmlInstance '$x' '${classnameFor(choice.bareAccessorType)}' '                    '/]
                    $writer->endElement();
                }
                [/#list]
              [#else]
                $writer->startElementNs([#if ((element.namespace??) && (element.namespace != ""))]'${prefix(element.namespace)}'[#else]null[/#if], '${element.name}', null);
                [@toPhpXmlInstance '$x' '${classnameFor(element.collectionItemType)}' '                '/]
                $writer->endElement();
              [/#if]
            }
            [#if element.wrapped]
            $writer->endElement();
            [/#if]
        }
          [#else]
        if ($this->${element.clientSimpleName}) {
            $writer->startElementNs([#if ((element.namespace??) && (element.namespace != ""))]'${prefix(element.namespace)}'[#else]null[/#if], '${element.name}', null);
            [@toPhpXmlInstance '$this->${element.clientSimpleName}' '${classnameFor(element)}' '            '/]
            $writer->endElement();
        }
          [/#if]
        [/#if]
      [/#list]
    [/#if]
    }
}
[/#macro]