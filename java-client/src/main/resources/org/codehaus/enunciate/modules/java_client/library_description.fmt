[#ftl]
[#-- @ftlvariable name="sample_resource" type="org.codehaus.enunciate.contract.jaxrs.ResourceMethod" --]
[#-- @ftlvariable name="sample_service_method" type="org.codehaus.enunciate.contract.jaxws.WebMethod" --]
<h1>
  Introduction
</h1>

<p>
  The Java client-side library is used to access the Web service API for this application.
</p>

[#if sample_service_method??]
<p>
  The Java client-side uses <a href="https://jax-ws.dev.java.net/">JAX-WS</a> to access the SOAP API
  for this application.
</p>

<h1>
    JAX-WS Example
</h1>

<code>
// instantiate a new service with an impl
// (or through dependency injection, or whatever)...
${sample_service_method.declaringEndpointInterface.simpleName} service = new ${sample_service_method.declaringEndpointInterface.simpleName}();

//make the remote call to read the result...
result = service.${sample_service_method.simpleName}([#list sample_service_method.webParameters as param]${param.clientSimpleName}[#if param_has_next], [/#if][/#list]);

//handle the result as needed...
</code>
[/#if]
[#if sample_resource??]
<p>
  The JAX-WS client-side library is used to provide the set of Java objects that can be serialized
  to/from XML using <a href="https://jaxb.dev.java.net/">JAXB</a>.  This is useful for accessing the
  REST endpoints that are published by this application.
</p>

[#if sample_resource.representationMetadata?? && sample_resource.representationMetadata.xmlElement??]
<h1>
  REST Example (Raw JAXB)
</h1>

<code>
java.net.URL url = new java.net.URL(baseURL + "${sample_resource.fullpath}");
JAXBContext context = JAXBContext.newInstance( ${sample_resource.representationMetadata.xmlElement.simpleName}.class[#if sample_resource.entityParameter?? && sample_resource.entityParameter.xmlElement??], ${sample_resource.entityParameter.xmlElement.simpleName}.class[/#if] );
java.net.URLConnection connection = url.openConnection();
[#if sample_resource.entityParameter?? && sample_resource.entityParameter.xmlElement??]
connection.setDoOutput(true);
[/#if]
connection.connect();

Unmarshaller unmarshaller = context.createUnmarshaller();
[#if sample_resource.entityParameter?? && sample_resource.entityParameter.xmlElement??]
Marshaller marshaller = context.createMarshaller();
marshaller.marshal(${sample_resource.entityParameter.xmlElement.simpleName?uncap_first}, connection.getOutputStream());
[/#if]
${sample_resource.representationMetadata.xmlElement.simpleName} result = (${sample_resource.representationMetadata.xmlElement.simpleName}) unmarshaller.unmarshal( connection.getInputStream() );
//handle the result as needed...
</code>

<h1>
  REST Example (Jersey client)
</h1>

<code>
com.sun.jersey.api.client.Client client = com.sun.jersey.api.client.Client.create();

${sample_resource.representationMetadata.xmlElement.simpleName} result = client.resource(baseUrl + "${sample_resource.fullpath}")
  [#if sample_resource.entityParameter?? && sample_resource.entityParameter.xmlElement??].entity(${sample_resource.entityParameter.xmlElement.simpleName?uncap_first})[/#if]
  .${sample_resource.httpMethods?first?lower_case}(${sample_resource.representationMetadata.xmlElement.simpleName}.class);

//handle the result as needed...
</code>
[/#if]
[/#if]