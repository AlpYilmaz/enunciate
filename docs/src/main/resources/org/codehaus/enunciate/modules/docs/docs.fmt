[#ftl]
[#function scrubPathToFilename path]
  [#return "path_" + path?string?replace("/", "_")?replace(":","-")?replace("{", "-")?replace("}", "-") + ".html"/]
[/#function]
[#function tocNeeded(nodelist)]
  [#return nodelist?size > 2/]
[/#function]
[#function attributeExists(node)]
  [#if node?size??]
    [#--if there is a 'size' property, then it's not an attribute--]
    [#return node?size > 0/]
  [#else]
    [#return node?node_type = "attribute"/]
  [/#if]
[/#function]
[#function facetApplicable element facetName]
  [#list element.facets.facet as facet]
    [#if facet.name = facetName]
      [#return true/]
    [/#if]
  [/#list]
  [#return false/]
[/#function]
[#function isDeprecated element]
  [#return (getTagValues(element, "deprecated")?size > 0)/]
[/#function]
[#function getTagValues element tagName]
  [#assign tagvalues = [] /]
  [#list element.tag as tag]
    [#if tag.@name=tagName]
      [#assign tagvalues = tagvalues + [ tag ] /]
    [/#if]
  [/#list]
  [#if element?node_name = "resource"]
    [#assign operationtags = [] /]
    [#list element.operation as operation]
      [#list operation.tag as tag]
        [#if tag.@name=tagName]
          [#assign operationtags = operationtags + [ tag ] /]
        [/#if]
      [/#list]
    [/#list]
    [#if operationtags?size = element.operation?size]
      [#assign tagvalues = tagvalues + [ operationtags[0] ]/]
    [/#if]
  [/#if]
  [#return tagvalues/]
[/#function]

[#--set up the subnavigation menus--]
[#assign nav_sections = { } /]
[#if resources?size > 0]
  [#assign nav_sections = nav_sections + { "Resources" : "resources.html" }/]
[/#if]
[#if services?size > 0]
  [#assign nav_sections = nav_sections + { "Services" : "services.html" }/]
[/#if]
[#if data?size > 0]
  [#assign nav_sections = { "Data Types" : "data.html" } /]
[/#if]
[#if downloads?size > 0]
  [#assign nav_sections = nav_sections + { "Files and Libraries" : "downloads.html"} /]
[/#if]

[#assign nav_resource_facets = {}/]
[#if groupRestResources??]
  [#list docsxml.rest.facets.facet?sort_by("value") as facet]
    [#if facet.name = groupRestResources]
      [#assign nav_resource_facets = nav_resource_facets + { facet.value : "resource_" + facet.value + ".html"}/]
    [/#if]
  [/#list]
[/#if]

[#assign nav_paths = {}/]
[#list docsxml.rest.resources.resource?sort_by("@name") as resource]
  [#assign nav_paths = nav_paths + {resource.@name?string : scrubPathToFilename(resource.@name)}/]
[/#list]

[#assign nav_wsdls = {}/]
[#assign nav_eis_by_ns = {}/]
[#list docsxml.soap.wsdls.wsdl as wsdl]
  [#assign nav_wsdls = nav_wsdls + {wsdl.@namespaceId?string : "soap_" + wsdl.@namespaceId?string + ".html"}/]
  [#assign nav_eis_by_ns = nav_eis_by_ns + {wsdl.@namespaceId?string : {}}/]
  [#list wsdl.endpointInterface?sort_by("@name") as endpointInterface]
    [#assign tmp = nav_eis_by_ns[wsdl.@namespaceId?string] + {endpointInterface.@name?string : "soap_" + wsdl.@namespaceId?string + "_" + endpointInterface.@name?string + ".html"}/]
    [#assign nav_eis_by_ns = nav_eis_by_ns + {wsdl.@namespaceId?string : tmp}/]
  [/#list]
[/#list]

[#assign nav_models = {}/]
[#assign nav_typedefs_by_ns = {}/]
[#assign nav_elements_by_ns = {}/]
[#list docsxml.data.schema as schema]
  [#assign nav_models = nav_models + {schema.@namespaceId?string : schema.@namespaceId?string + ".html"}/]
  [#assign nav_elements_by_ns = nav_elements_by_ns + {schema.@namespaceId?string : {}}/]
  [#list schema.elements.element?sort_by("@name") as element]
    [#assign tmp = nav_elements_by_ns[schema.@namespaceId?string] + { element.@name?string + " element" : "el_" + schema.@namespaceId?string + "_" + element.@name?string + ".html"}/]
    [#assign nav_elements_by_ns = nav_elements_by_ns + {schema.@namespaceId?string : tmp}/]
  [/#list]
  [#assign nav_typedefs_by_ns = nav_typedefs_by_ns + {schema.@namespaceId?string : {}}/]
  [#list schema.types.type?sort_by("@name") as type]
    [#assign tmp = nav_typedefs_by_ns[schema.@namespaceId?string] + {type.@name?string : schema.@namespaceId?string + "_" + type.@name?string + ".html"}/]
    [#assign nav_typedefs_by_ns = nav_typedefs_by_ns + {schema.@namespaceId?string : tmp}/]
  [/#list]
[/#list]

[#--Basic boilerplate macro.--]
[#macro boilerplate title=title!"Web API" breadcrumbs=[{"title" : "Home", "href" : indexPageName}] pagenav=[] codeblocks=true]
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->

  <title>${title}</title>

  <!-- Mobile viewport optimized: j.mp/bplateviewport -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- Bootstrap core CSS -->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">

  <!--custom css for these pages-->
  <link rel="stylesheet" href="${cssFile}">
  [#list additionalCssFiles as additionalCssFile]
  <link rel="stylesheet" href="${additionalCssFile}">
  [/#list]

  <link href="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify.css" type="text/css">

  <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
  <!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
  <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
  <![endif]-->
</head>

<body data-spy="scroll" data-target="#apinav">

  <nav class="navbar navbar-inverse navbar-fixed-top">
    <div class="container-fluid">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="#">Web API</a>
      </div>
      <div id="navbar" class="navbar-collapse collapse">
        <ul class="nav navbar-nav navbar-right">
  [#if serviceGroups?size > 0]
          <li><a href="services.html">Services</a></li>
  [/#if]
  [#if resourceGroups?size > 0]
          <li><a href="resources.html">Resources</a></li>
  [/#if]
  [#if data?size > 0]
          <li><a href="data.html">Data Types</a></li>
  [/#if]
  [#if downloads?size > 0]
          <li><a href="downloads.html">Files and Libraries</a></li>
  [/#if]
        </ul>
      </div>
    </div>
  </nav>

  <div class="container-fluid">
    <div class="row">
      <div class="col-sm-3 col-md-2 sidebar" id="apinav">
        <ul class="nav nav-sidebar">
  [#list pagenav as nav]
          <li><a href="${nav.href}">${nav.title}</a></li>
  [/#list]
  [#if pagenav?size > 0]
          <li class="divider"></li>
  [/#if]
          <li><a href="#top">Back to Top</a></li>
        </ul>
      </div>

      <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
        <ol class="breadcrumb" id="top">
  [#list breadcrumbs as crumb]
          <li class="[#if crumb_has_next]active [/#if]dropdown">
    [#if crumb.subnav]
            <a class="dropdown-toggle" data-toggle="dropdown" href="#">${crumb.title} <span class="caret"></span></a>
            <ul class="dropdown-menu">
              <li><a href="${crumb.href}">${crumb.title}</a></li>
              <li class="divider"></li>
      [#list crumb.subnav?keys as label]
              <li><a href="${crumb.subnav[label]}">${label}</a></li>
      [/#list]
            </ul>
    [#else]
            <a href="${crumb.href}">${crumb.title}</a>
    [/#if]
          </li>
  [/#list]
        </ol>

        [#nested/]

        <footer class="footer">
          <div class="container">
            <p class="text-muted">[#if copyright??]Copyright &copy; <script type="text/javascript" language="javascript">d = new Date;document.write(d.getFullYear());</script> <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">${copyright}</span>. Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.[/#if]</p>
          </div>
        </footer>

      </div>
    </div>
  </div>


  <!-- JavaScript placed at the end of the document so the pages load faster. -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>

  <!-- Bootstrap core JavaScript
  ================================================== -->
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>

  <!-- prettify code blocks. see http://code.google.com/p/google-code-prettify/ -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" type="text/javascript"></script>
  <script>
    $(function() {
      prettyPrint();
    });
  </script>

</body>
</html>
[/#macro]
[#--Macro that wraps its text in a deprecated <s> tag if the element is deprecated.--]
[#macro deprecation element]
  [#assign deprecated=(element?? && element.deprecated!false)/]
  [#if deprecated]<s>[/#if][#nested/][#if deprecated]</s>[/#if]
[/#macro]
[@file name=indexPageName charset="utf-8"]
  [#assign pagenav=[]/]
  [#if resourceGroups?size > 0]
    [#assign pagenav=pagenav + [{ "href" : "#resources", "title" : "Resources" }]/]
  [/#if]
  [#if serviceGroups?size > 0]
    [#assign pagenav=pagenav + [{ "href" : "#services", "title" : "Services" }]/]
  [/#if]
  [#list data as syntax]
    [#assign pagenav=pagenav + [{ "href" : "#" + syntax.label, "title" : syntax.label }]/]
  [/#list]
  [@boilerplate pagenav=pagenav]
    [#if apiDoc??]
  <div class="jumbotron">
    <div class="container">
      ${apiDoc}
    </div>
  </div>
    [/#if]
    [#if resourceGroups?size > 0]

  <h1 class="page-header" id="resources">Resources</h1>

  <table class="table table-hover">
      [#assign headResourceGroup=resourceGroups[0]/]
    <thead>
    <tr>
      [#if headResourceGroup.name??]
      <th align="center">name</th>
      [/#if]
      [#if headResourceGroup.path??]
      <th align="center">path</th>
      [/#if]
      [#if headResourceGroup.methods??]
      <th align="center">methods</th>
      [/#if]
      [#if headResourceGroup.description??]
      <th align="center">description</th>
      [/#if]
    </tr>
    </thead>
    <tbody data-link="row" class="rowlink">
      [#list resourceGroups as resourceGroup]
        [@processResourceGroup resourceGroup=resourceGroup/]
    <tr>
        [#if headResourceGroup.name??]
      <td>[@deprecation element=resourceGroup]<a href="${resourceGroupHref(resourceGroup)}">${resourceGroup.name}</a>[/@deprecation]</td>
        [/#if]
        [#if headResourceGroup.path??]
      <td>[@deprecation element=resourceGroup]${resourceGroup.path}[/@deprecation]</td>
        [/#if]
        [#if headResourceGroup.methods??]
      <td>[@deprecation element=resourceGroup][#list resourceGroup.methods as method]${method}[#if method_has_next], [/#if][/#list][/@deprecation]</td>
        [/#if]
        [#if headResourceGroup.description??]
      <td>[@deprecation element=resourceGroup]${resourceGroup.description!"&nbsp;"}[/@deprecation]</td>
        [/#if]
    </tr>
      [/#list]
    </tbody>
  </table>
      [#if downloads?size > 0]
  <p>
    The resources use a data model that is supported by a set of client-side libraries that are made available on the
    <a href="downloads.html">files and libraries</a> page.
  </p>
      [/#if]
      [#if wadl??]
  <p>
    There is a <a href="${wadl}">WADL document</a> available that describes the resources API.
  </p>
      [/#if]
      [#if swaggerDir??]
  <p>
    You may also enjoy the <a href="${swaggerDir}/index.html">Swagger UI</a> provided for this API.
  </p>
      [/#if]
    [/#if]
    [#if serviceGroups?size > 0]

  <h1 class="page-header" id="services">Services</h1>
      [#list serviceGroups as serviceGroup]

  <table class="table table-hover">
  <caption>Namespace <code>${serviceGroup.namespace}</code>[#if serviceGroup.wsdlFile??] (<a href="${serviceGroup.wsdlFile}">wsdl</a>)[/#if]</caption>
  <thead>
    <tr>
      <th align="center">name</th>
      <th align="center">description</th>
    </tr>
  </thead>
  <tbody data-link="row" class="rowlink">
        [#list serviceGroup.services as service]
          [@processService service=service/]
    <tr>
      <td>[@deprecation element=service]<a href="${serviceHref(service)}">${service.name}</a>[/@deprecation]</td>
      <td>[@deprecation element=service]${service.description!"&nbsp;"}[/@deprecation]</td>
    </tr>
        [/#list]
  </tbody>
  </table>
      [/#list]
      [#if downloads?size > 0]

  <p>The services API is also accessible by a set of client-side libraries that can be downloaded from the <a href="downloads.html">files and libraries page</a>.</p>
      [/#if]
    [/#if]
    [#if data?size > 0]

  <h1 class="page-header" id="data">Data Types</h1>
      [#list data as syntax]

  <h3 id="${syntax.label}">${syntax.label}</h3>
        [#list syntax.namespaces as ns]

  <table class="table table-hover">
          [#if ns.uri??]
            [#if ns.uri?length > 0]
  <caption>Namespace <code>${ns.uri}</code>[#if ns.schemaFile??] (<a href="${ns.schemaFile}">schema</a>)[/#if]</caption>
            [#else]
  <caption>Default Namespace [#if ns.schemaFile??] (<a href="${ns.schemaFile}">schema</a>)[/#if]</caption>
            [/#if]
          [/#if]
  <thead>
    <tr>
      <th align="center">type</th>
      <th align="center">description</th>
    </tr>
  </thead>
  <tbody data-link="row" class="rowlink">
          [#list ns.types as type]
            [@processDataType type=type/]
    <tr>
      <td>[@deprecation element=type]<a href="${dataTypeHref(type)}">${type.name}</a>[/@deprecation]</td>
      <td>[@deprecation element=type]${type.description}[/@deprecation]</td>
    </tr>
          [/#list]
  </tbody>
  </table>
        [/#list]
      [/#list]
    [/#if]
  [/@boilerplate]
[/@file]
[@file name="data.html" charset="utf-8"]
  [@boilerplate title=(title!"Web API") + ": Data Types" breadcrumbs=[{"title" : "Home", "href" : indexPageName}, {"title" : "Data Types" , "href" : "data.html", "subnav" : nav_sections}]]
  <h1 class="page-header" id="data">Data Types</h1>
    [#list data as syntax]

  <h3 id="${syntax.label}">${syntax.label}</h3>
      [#list syntax.namespaces as ns]

  <table class="table table-hover">
        [#if ns.uri??]
          [#if ns.uri?length > 0]
  <caption>Namespace <code>${ns.uri}</code>[#if ns.schemaFile??] (<a href="${ns.schemaFile}">schema</a>)[/#if]</caption>
          [#else]
  <caption>Default Namespace [#if ns.schemaFile??] (<a href="${ns.schemaFile}">schema</a>)[/#if]</caption>
          [/#if]
        [/#if]
  <thead>
    <tr>
      <th align="center">type</th>
      <th align="center">description</th>
    </tr>
  </thead>
  <tbody data-link="row" class="rowlink">
        [#list ns.types as type]
          [@processDataType type=type/]
    <tr>
      <td>[@deprecation element=type]<a href="${dataTypeHref(type)}">${type.name}</a>[/@deprecation]</td>
      <td>[@deprecation element=type]${type.description}[/@deprecation]</td>
    </tr>
        [/#list]
  </tbody>
  </table>
      [/#list]
    [/#list]
  [/@boilerplate]
[/@file]
[#if downloads?size > 0]
  [@file name="downloads.html" charset="utf-8"]
    [#assign pagenav=[]/]
    [#list downloads as download]
      [#assign pagenav=pagenav + [{ "href" : "#" + download.name, "title" : download.title }]/]
    [/#list]
    [@boilerplate title=(title!"Web API") + ": Files and Libraries" breadcrumbs=[{"title" : "Home", "href" : indexPageName}, { "title" : "Files and Libraries" , "href" : "downloads.html" , "subnav" : nav_sections}] codeblocks=true]
  <h1 class="page-header">Files and Libraries</h1>

      [#list downloads as download]
  <a name="${download.name}"></a>
  <h3 id="#${download.name}">${download.name}</h3>
        [#if download.created??]
  <p class="lead">Created ${download.created}</p>
        [/#if]
        [#if download.description??]
  <p>${download.description}</p>
        [/#if]
  <table class="table table-hover">
    <caption>Files</caption>
    <thead>
    <tr>
      <th>name</th>
      <th>size</th>
      <th>description</th>
    </tr>
    </thead>
    <tbody data-link="row" class="rowlink">
        [#list download.files as file]
    <tr>
      <td><a href="${file.name}">${file.name}</a></td>
      <td>${file.size}</td>
      <td>${file.description}</td>
    </tr>
        [/#list]
    </tbody>
  </table>
      [/#list]
    [/@boilerplate]
  [/@file]
[/#if]
[#if resources?size > 0]
  [@file name="resources.html" charset="utf-8"]
    [@boilerplate title=(title!"Web API") + ": Resources" breadcrumbs=[{"title" : "Home", "href" : indexPageName}, {"title" : "Resources" , "href" : "resources.html", "subnav" : nav_sections}]]
  <h1 class="page-header" id="resources">Resources</h1>

  <table class="table table-hover">
      [#assign headResourceGroup=resourceGroups[0]/]
    <thead>
    <tr>
      [#if headResourceGroup.name??]
      <th align="center">name</th>
      [/#if]
      [#if headResourceGroup.path??]
      <th align="center">path</th>
      [/#if]
      [#if headResourceGroup.methods??]
      <th align="center">methods</th>
      [/#if]
      [#if headResourceGroup.description??]
      <th align="center">description</th>
      [/#if]
    </tr>
    </thead>
    <tbody data-link="row" class="rowlink">
      [#list resourceGroups as resourceGroup]
        [@processResourceGroup resourceGroup=resourceGroup/]
    <tr>
        [#if headResourceGroup.name??]
      <td>[@deprecation element=resourceGroup]<a href="${resourceGroupHref(resourceGroup)}">${resourceGroup.name}</a>[/@deprecation]</td>
        [/#if]
        [#if headResourceGroup.path??]
      <td>[@deprecation element=resourceGroup]${resourceGroup.path}[/@deprecation]</td>
        [/#if]
        [#if headResourceGroup.methods??]
      <td>[@deprecation element=resourceGroup][#list resourceGroup.methods as method]${method}[#if method_has_next], [/#if][/#list][/@deprecation]</td>
        [/#if]
        [#if headResourceGroup.description??]
      <td>[@deprecation element=resourceGroup]${resourceGroup.description!"&nbsp;"}[/@deprecation]</td>
        [/#if]
    </tr>
      [/#list]
    </tbody>
  </table>
      [#if downloads?size > 0]
  <p>
    The resources use a data model that is supported by a set of client-side libraries that are made available on the
    <a href="downloads.html">files and libraries</a> page.
  </p>
      [/#if]
      [#if wadl??]
  <p>
    There is a <a href="${wadl}">WADL document</a> available that describes the resources API.
  </p>
      [/#if]
      [#if swaggerDir??]
  <p>
    You may also enjoy the <a href="${swaggerDir}/index.html">Swagger UI</a> provided for this API.
  </p>
      [/#if]
    [/@boilerplate]
  [/@file]
[/#if]
[#if services?size > 0]
  [@file name="services.html" charset="utf-8"]
    [@boilerplate title=(title!"Web API") + ": Services" breadcrumbs=[{"title" : "Home", "href" : indexPageName}, {"title" : "Services" , "href" : "services.html", "subnav" : nav_sections}]]
  <h1 class="page-header" id="services">Services</h1>
      [#list serviceGroups as serviceGroup]

  <table class="table table-hover">
  <caption>Namespace <code>${serviceGroup.namespace}</code>[#if serviceGroup.wsdlFile??] (<a href="${serviceGroup.wsdlFile}">wsdl</a>)[/#if]</caption>
  <thead>
    <tr>
      <th align="center">name</th>
      <th align="center">description</th>
    </tr>
  </thead>
  <tbody data-link="row" class="rowlink">
        [#list serviceGroup.services as service]
          [@processService service=service/]
    <tr>
      <td>[@deprecation element=service]<a href="${serviceHref(service)}">${service.name}</a>[/@deprecation]</td>
      <td>[@deprecation element=service]${service.description!"&nbsp;"}[/@deprecation]</td>
    </tr>
        [/#list]
  </tbody>
  </table>
      [/#list]
      [#if downloads?size > 0]

  <p>The services API is also accessible by a set of client-side libraries that can be downloaded from the <a href="downloads.html">files and libraries page</a>.</p>
      [/#if]
    [/@boilerplate]
  [/@file]
[/#if]
[#macro processWsdl wsdl]
  [@file name="soap_" + wsdl.@namespaceId + ".html" charset="utf-8"]
    [@boilerplate title="SOAP: " + wsdl.@namespaceId breadcrumbs=[{"title" : "Home", "href" : indexPageName}, {"title" : "SOAP" , "href" : "soap.html", "subnav" : nav_sections }, { "title" : wsdl.@namespaceId?string , "href" : "soap_" + wsdl.@namespaceId + ".html" }]]
  <h1>${wsdl.@namespaceId}</h1>
  <table>
    <tr>
      <td align="right">Namespace URI:</td>
      <td>[#if wsdl.@namespace?length > 0]${wsdl.@namespace}[#else](default namespace)[/#if]</td>
    </tr>
        [#if attributeExists(wsdl.@file)]
    <tr>
      <td align="right">WSDL:</td>
      <td><a href="${wsdl.@file}">${wsdl.@file}</a></td>
    </tr>
        [/#if]
  </table>
  <h3>Endpoints</h3>
  <ul>
      [#list wsdl.endpointInterface?sort_by("@name") as endpointInterface]
    <li[#if isDeprecated(endpointInterface)] class="deprecated"[/#if]><a href="soap_${wsdl.@namespaceId}_${endpointInterface.@name}.html">${endpointInterface.@name}</a></li>
      [/#list]
  </ul>
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processResourceFacet facet]
  [@file name="resource_" + facet.value + ".html" charset="utf-8"]
    [@boilerplate title=facet.value breadcrumbs=[{"title" : "Home", "href" : indexPageName}, {"title" : "REST" , "href" : "rest.html", "subnav" : nav_sections}, {"title" : facet.value , "href" : "resource_" + facet.value + ".html", "subnav" : nav_resource_facets}]]
      <h1>${facet.value}</h1>

      [#list facet.documentation as documentation]
      <p>${documentation}</p>
      [/#list]
      [#assign resources=[] /]
      [#list docsxml.rest.resources.resource?sort_by("@name") as resource]
        [#list resource.facets.facet as rg]
          [#if ((rg.name = facet.name) && (rg.value == facet.value))]
            [#assign resources=resources + resource /]
            [#break/]
          [/#if]
        [/#list]
      [/#list]
      <p>The following resources are applicable:</p>
      <ul>
        [#list resources as resource]
        <li[#if isDeprecated(resource)] class="deprecated"[/#if]>
        [#if resource.label?has_content]
        <a href="#${scrubPathToFilename(resource.label)}">${resource.label}</a>
        [#else]
        <a href="#${scrubPathToFilename(resource.@name)}">${resource.@name}</a>
        [/#if]
        </li>
        [/#list]
      </ul>
      [#list resources as resource]
        [#if resource.label?has_content]
        <a name="${scrubPathToFilename(resource.label)}"></a>
        [#else]
        <a name="${scrubPathToFilename(resource.@name)}"></a>
        [/#if]
        [@processRawResource resource=resource/]
      [/#list]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processResource resource]
  [#assign resource_filename=scrubPathToFilename(resource.@name)/]
  [@file name=resource_filename charset="utf-8"]
    [@boilerplate title=facet breadcrumbs=[{"title" : "Home", "href" : indexPageName}, { "title" : "REST" , "href" : "rest.html", "subnav" : nav_sections }, {"title" : resource.@name , "href" : resource_filename, "subnav" : nav_paths}]]
      [@processRawResource resource=resource/]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processRawResource resource]
  [#if resource.label?has_content]
      <h1>${resource.label}</h1>
  [#else]
      <h1>${resource.@name}</h1>
  [/#if]
  [#if isDeprecated(resource)]
  <p class="alert">This resource has been deprecated.</p>
  [/#if]
  [#if attributeExists(resource.@subcontext) && !disableRestMountpoint!false]
      <p class="note">Mount Point: <a href="${apiRelativePath}${resource.@subcontext}${resource.@name}">${resource.@subcontext}${resource.@name}</a></p>
  [/#if]
  [#assign sinceTags = getTagValues(resource, "since") /]
  [#if sinceTags?size > 0]
      <p class="note">Available Since: ${sinceTags[0]}</p>
  [/#if]
  [#assign versionTags = getTagValues(resource, "version") /]
  [#if versionTags?size > 0]
      <p class="note">Version: ${versionTags[0]}</p>
  [/#if]
  [#if tocNeeded(resource.operation)]
      <p>
        The following operations are supported on this resource:
      </p>
      <ul>
    [#list resource.operation as operation]
        <li[#if isDeprecated(operation)] class="deprecated"[/#if]><a href="#${operation.@name}${scrubPathToFilename(resource.@name)}">${operation.@name}</a></li>
      [#list operation.alias as alias]
        <li[#if isDeprecated(operation)] class="deprecated"[/#if]><a href="#${operation.@name}${scrubPathToFilename(resource.@name)}">${alias}</a></li>
      [/#list]
    [/#list]
      </ul>
  [/#if]
  [#list resource.operation as operation]
      <a name="${operation.@name}${scrubPathToFilename(resource.@name)}"></a>
      <h2>${operation.@name}</h2>
    [#list operation.alias as alias]
      <p class="note">Alias: ${alias}</p>
    [/#list]
    [#assign sinceTags = getTagValues(operation, "since") /]
    [#if sinceTags?size > 0]
      <p class="note">Available Since: ${sinceTags[0]}</p>
    [/#if]
    [#assign versionTags = getTagValues(operation, "version") /]
    [#if versionTags?size > 0]
      <p class="note">Version: ${versionTags[0]}</p>
    [/#if]
    [#if isDeprecated(operation)]
      <p class="alert">This operation has been deprecated. [#list operation.tag as tag][#if tag.@name="deprecated"] ${tag}[/#if][/#list]</p>
    [/#if]
    [#list operation.documentation as documentation]
      <p>${documentation}</p>
    [/#list]
    [#list operation.parameter as parameter]
      [#if parameter_index = 0]
      <h3>Parameters</h3>
      <table>
        <tr>
          <th>name</th>
          <th>description</th>
          <th>type</th>
          <th>default</th>
        </tr>
      [/#if]
        <tr>
          <td>[#if attributeExists(parameter.@name)]${parameter.@name}[/#if]</td>
          <td>${parameter}</td>
          <td>[#if attributeExists(parameter.@type)]${parameter.@type}[/#if]</td>
          <td>[#if attributeExists(parameter.@defaultValue)]${parameter.@defaultValue}[/#if]</td>
        </tr>
      [#if !parameter_has_next]
      </table>
      [/#if]
    [/#list]
    [#list operation.inValue as inValue]
      <h3>Request Body</h3>
      <table>
      [#assign custom=true]
      [#list inValue.xmlElement as xmlElement]
        [#if attributeExists(xmlElement.@elementName)]
          [#assign custom=false/]
        <tr>
          <td align="right">element:</td>
          [#if attributeExists(xmlElement.@elementSchemaId)]
          <td><a href="el_${xmlElement.@elementSchemaId}_${xmlElement.@elementName}.html">${xmlElement.@elementName}</a></td>
          [#else]
          <td>${xmlElement.@elementName}</td>
          [/#if]
        </tr>
        [/#if]
      [/#list]
      [#list inValue.jsonElementRef as jsonElement]
        [#if attributeExists(jsonElement.@elementName)]
          [#assign custom=false/]
        <tr>
          <td align="right">element:</td>
          [#if attributeExists(jsonElement.@elementSchemaId)]
          <td><a href="json_${jsonElement.@elementSchemaId}_${jsonElement.@elementName}.html">${jsonElement.@elementName}</a></td>
          [#else]
          <td>${jsonElement.@elementName}</td>
          [/#if]
        </tr>
        [/#if]
      [/#list]
      [#if custom]
        <tr>
          <td align="right">element:</td>
          [#if operation.customParameterName?has_content]
            <td>${operation.customParameterName}</td>
          [#else]
            <td>(custom)</td>
          [/#if]
        </tr>
      [/#if]
        <tr>
          <td align="right">media types:</td>
          <td>[#list operation.contentType as contentType][#if contentType.@consumable = "true"]${contentType.@type}[#if contentType_has_next]<br/>[/#if][/#if][/#list]</td>
        </tr>
      </table>
      [#list inValue.documentation as documentation]
      <p>${documentation}</p>
      [/#list]
      [#if operation.showSampleRequest?has_content]
      <code class="prettyprint">${operation.@name} ...${resource.@subcontext}${resource.@name}
Accept: [#assign first = true/][#list operation.contentType as contentType][#if contentType.@produceable = "true"][#if !first];[/#if][#assign first=false/]${contentType.@type}[/#if][/#list]
[#if custom]
Content-Type: [#assign first = true/][#list operation.contentType as contentType][#if contentType.@consumable = "true"][#if !first];[/#if][#assign first=false/]${contentType.@type}[/#if][/#list]
[#else]
    [#if operation.showSampleRequest == "JSON"]
Content-Type: application/json
    [#elseif operation.showSampleRequest == "XML"]
Content-Type: application/xml
    [#else]
Content-Type: [#assign first = true/][#list operation.contentType as contentType][#if contentType.@consumable = "true"][#if !first];[/#if][#assign first=false/]${contentType.@type}[/#if][/#list]
    [/#if]
[/#if]
--- Body ---
[#if custom]
    [#if operation.customParameterName?has_content]
[${operation.customParameterName}]
    [#else]
(custom)
    [/#if]
[#else]
    [#list inValue.xmlElement as xmlElement]
        [#if attributeExists(xmlElement.@elementName)]
            [#list docsxml.data.schema as schema]
                [#list schema.elements.element?sort_by("@name") as element]
                    [#if xmlElement.@elementName == element.@name]
                        [#if operation.showSampleRequest == "JSON"]
                            [#list element.examplejson as examplejson]
${examplejson?string?xhtml}
                            [/#list]
                        [#else]
                            [#list element.examplexml as examplexml]
${examplexml?string?xhtml}
                            [/#list]
                        [/#if]
                    [/#if]
                [/#list]
            [/#list]
        [/#if]
    [/#list]
[/#if]
</code>
      [/#if]
    [/#list]
    [#list operation.outValue as outValue]
      <h3>Response Body</h3>
      <table>
      [#assign custom=true]
      [#list outValue.xmlElement as xmlElement]
        [#if attributeExists(xmlElement.@elementName)]
          [#assign custom=false/]
        <tr>
          <td align="right">element:</td>
          [#if attributeExists(xmlElement.@elementSchemaId)]
          <td><a href="el_${xmlElement.@elementSchemaId}_${xmlElement.@elementName}.html">${xmlElement.@elementName}</a></td>
          [#else]
          <td>${xmlElement.@elementName}</td>
          [/#if]
        </tr>
        [/#if]
      [/#list]
      [#list outValue.jsonElementRef as jsonElement]
        [#if attributeExists(jsonElement.@elementName)]
          [#assign custom=false/]
        <tr>
          <td align="right">element:</td>
          [#if attributeExists(jsonElement.@elementSchemaId)]
          <td><a href="json_${jsonElement.@elementSchemaId}_${jsonElement.@elementName}.html">${jsonElement.@elementName}</a></td>
          [#else]
          <td>${jsonElement.@elementName}</td>
          [/#if]
        </tr>
        [/#if]
      [/#list]
      [#if custom]
        <tr>
          <td align="right">element:</td>
          <td>(custom)</td>
        </tr>
      [/#if]
        <tr>
          <td align="right">media types:</td>
          <td>[#list operation.contentType as contentType][#if contentType.@produceable = "true"]${contentType.@type}[#if contentType_has_next]<br/>[/#if][/#if][/#list]</td>
        </tr>
      </table>
      [#list outValue.documentation as documentation]
      <p>${documentation}</p>
      [/#list]
[#if operation.showSampleResponse?has_content]
      <code class="prettyprint">HTTP/1.1 ${operation.showSampleResponse.@code}
[#if operation.showSampleResponse == "JSON"]
Content-Type: application/json
    [#elseif operation.showSampleResponse == "XML"]
Content-Type: application/xml
    [#else]
Content-Type: [#assign first = true/][#list operation.contentType as contentType][#if contentType.@produceable = "true"][#if !first];[/#if][#assign first=false/]${contentType.@type}[/#if][/#list]
    [/#if]
--- Body ---
[#if custom]    
(custom)
[#else]
    [#list outValue.xmlElement as xmlElement]
        [#if attributeExists(xmlElement.@elementName)]
            [#list docsxml.data.schema as schema]
                [#list schema.elements.element?sort_by("@name") as element]
                    [#if xmlElement.@elementName == element.@name]
                        [#if operation.showSampleResponse == "JSON"]
                            [#list element.examplejson as examplejson]
${examplejson?string?xhtml}
                            [/#list]
                        [#else]
                            [#list element.examplexml as examplexml]
${examplexml?string?xhtml}
                            [/#list]
                        [/#if]
                    [/#if]
                [/#list]
            [/#list]
        [/#if]
    [/#list]
[/#if]
</code>
      [/#if]
    [/#list]
    [#list operation.statusCode as statusCode]
      [#if statusCode_index = 0]
      <h3>Status Codes</h3>
      <table>
        <tr>
          <th width="130">HTTP Status Code</th>
          <th>Description</th>
          [#list operation.additionalHeaderLabels.label as label]
          <th>${label}</th>
          [/#list]
        </tr>
      [/#if]
        <tr>
          <td>${statusCode.@code}</td>
          <td>${statusCode.condition}</td>
          [#list statusCode.additionalHeaders.additionalHeader as header]
            <td>${header}</td>
          [/#list]
        </tr>
      [#if !statusCode_has_next]
      </table>
      [/#if]
    [/#list]
    [#list operation.warning as warning]
      [#if warning_index = 0]
      <h3>Warnings</h3>
      <table>
        <tr>
          <th>HTTP Status Code</th>
          <th>Description</th>
        </tr>
      [/#if]
        <tr>
          <td>${warning.@code}</td>
          <td>${warning}</td>
        </tr>
      [#if !warning_has_next]
      </table>
      [/#if]
    [/#list]
    [#list operation.responseHeader as responseHeader]
      [#if responseHeader_index = 0]
      <h3>Response Headers</h3>
      <table>
        <tr>
          <th>name</th>
          <th>description</th>
        </tr>
      [/#if]
        <tr>
          <td>${responseHeader.name}</td>
          <td>${responseHeader.documentation}</td>
        </tr>
      [#if !responseHeader_has_next]
      </table>
      [/#if]
    [/#list]
  [/#list]
[/#macro]
[#macro processEndpointInterface endpointInterface]
  [@file name="soap_" + endpointInterface?parent.@namespaceId + "_" + endpointInterface.@name + ".html" charset="utf-8"]
    [@boilerplate title=endpointInterface.@name breadcrumbs=[{"title" : "Home", "href" : indexPageName}, {"title" : "SOAP" , "href" : "soap.html", "subnav" : nav_sections }, {"title" : endpointInterface?parent.@namespaceId , "href" : "soap_" + endpointInterface?parent.@namespaceId + ".html", "subnav" : nav_wsdls }, {"title" : endpointInterface.@name , "href" : "soap_" + endpointInterface.@name + ".html", "subnav" : nav_eis_by_ns[endpointInterface?parent.@namespaceId?string]}]]
      <h1>${endpointInterface.@name}</h1>
      [#if isDeprecated(endpointInterface)]
      <p class="alert">This endpoint has been deprecated.[#list endpointInterface.tag as tag][#if tag.@name="deprecated"] ${tag}[/#if][/#list]</p>
      [/#if]
      <table>
        <tr>
          <td align="right">Namespace:</td>
          <td>[#if (endpointInterface?parent).@namespace?length > 0]${(endpointInterface?parent).@namespace}[#else](default namespace)[/#if]</td>
        </tr>
        [#if attributeExists((endpointInterface?parent).@file)]
        <tr>
          <td align="right">WSDL:</td>
          <td><a href="${(endpointInterface?parent).@file}">${(endpointInterface?parent).@file}</a></td>
        </tr>
        [/#if]
        [#if attributeExists(endpointInterface.@path)]
          <tr>
            <td align="right">Path:</td>
            <td><a href="${apiRelativePath}${endpointInterface.@path}">${endpointInterface.@path}</a></td>
          </tr>
        [/#if]
        [#assign sinceTags = getTagValues(endpointInterface, "since") /]
        [#if sinceTags?size > 0]
          <tr>
            <td align="right">Available Since:</td>
            <td>${sinceTags[0]}</td>
          </tr>
        [/#if]
        [#assign versionTags = getTagValues(endpointInterface, "version") /]
        [#if versionTags?size > 0]
          <tr>
            <td align="right">Version:</td>
            <td>${versionTags[0]}</td>
          </tr>
        [/#if]
      </table>
      [#if endpointInterface.documentation?size > 0]
        [#list endpointInterface.documentation as documentation]
      <p>${documentation}</p>
        [/#list]
      [/#if]
      [#if tocNeeded(endpointInterface.method)]
      <p>
        The following methods are available on this endpoint:
      </p>
      <ul>
        [#list endpointInterface.method as method]
        <li[#if isDeprecated(method)] class="deprecated"[/#if]><a href="#${method.@name}">${method.@name}</a></li>
        [/#list]
      </ul>
      [/#if]
      [#list endpointInterface.method as method]
      <a name="${method.@name}"></a>
      <h2>${method.@name}</h2>
        [#if isDeprecated(method)]
      <p class="alert">This method has been deprecated.[#list method.tag as tag][#if tag.@name="deprecated"] ${tag}[/#if][/#list]</p>
        [/#if]
        [#assign sinceTags = getTagValues(method, "since") /]
        [#if sinceTags?size > 0]
      <p class="note">Available Since: ${sinceTags[0]}</p>
        [/#if]
        [#assign versionTags = getTagValues(method, "version") /]
        [#if versionTags?size > 0]
      <p class="note">Version: ${versionTags[0]}</p>
        [/#if]
        [#list method.documentation as documentation]
      <p>${documentation}</p>
        [/#list]
      <h3>Input Parameters</h3>
        [#assign anyInputParameters=false/]
        [#list method["parameter[@input='true']"] as parameter]
          [#assign anyInputParameters=true/]
          [#if parameter_index = 0]
      <table>
        <tr>
          <th>name</th>
          <th>type</th>
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td>${parameter.@name}</td>
          <td>[#if attributeExists(parameter.@xmlTypeName)][#if attributeExists(parameter.@xmlTypeSchemaId)]<a href="${parameter.@xmlTypeSchemaId}_${parameter.@xmlTypeName}.html">${parameter.@xmlTypeName}</a>[#else]${parameter.@xmlTypeName}[/#if][#else](unknown)[/#if]</td>
          <td>${parameter}</td>
        </tr>
          [#if !parameter_has_next]
      </table>
          [/#if]
        [/#list]
        [#if !anyInputParameters]
      <p>(none)</p>
        [/#if]
        [#list method["parameter[@output='true']"] as parameter]
          [#if parameter_index = 0]
      <h3>Output Parameters</h3>
      <table>
        <tr>
          <th>name</th>
          <th>type</th>
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td>${parameter.@name}</td>
          <td>[#if attributeExists(parameter.@xmlTypeName)][#if attributeExists(parameter.@xmlTypeSchemaId)]<a href="${parameter.@xmlTypeSchemaId}_${parameter.@xmlTypeName}.html">${parameter.@xmlTypeName}</a>[#else]${parameter.@xmlTypeName}[/#if][#else](unknown)[/#if]</td>
          <td>${parameter}</td>
        </tr>
          [#if !parameter_has_next]
      </table>
          [/#if]
        [/#list]
      <h3>Return Value</h3>
        [#assign anyReturnValue=false/]
        [#list method.result as result]
          [#assign anyReturnValue=true/]

          [#if attributeExists(result.@xmlTypeName)]
      <table>
        <tr>
          <td align="right">Type:</td>
          <td>[#if attributeExists(result.@xmlTypeSchemaId)]<a href="${result.@xmlTypeSchemaId}_${result.@xmlTypeName}.html">${result.@xmlTypeName}</a>[#else]${result.@xmlTypeName}[/#if]</td>
        </tr>
      </table>
          [/#if]

      <p>${result}</p>
        [/#list]
        [#if !anyReturnValue]
      <p>(none)</p>
        [/#if]
        [#list method.fault as fault]
          [#if fault_index = 0]
      <h3>Faults</h3>
      <table>
        <tr>
          <th>name</th>
          <!--todo: add the parameter type and whether its a collection-->
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td>${fault.@name}</td>
          <td>${fault}</td>
        </tr>
          [#if !fault_has_next]
      </table>
          [/#if]
        [/#list]
      [/#list]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processSchema schema]
  [@file name=schema.@namespaceId + ".html" charset="utf-8"]
    [@boilerplate title="Namespace: " + schema.@namespaceId breadcrumbs=[{"title" : "Home", "href" : indexPageName}, {"title" : "Data Model" , "href" : "model.html", "subnav" : nav_sections}, {"title" : schema.@namespaceId , "href" : schema.@namespaceId + ".html", "subnav" : nav_models}]]
      <h1>Namespace ${schema.@namespaceId}</h1>
      <table>
        <tr>
          <td align="right">Namespace:</td>
          <td>[#if schema.@namespace?length > 0]${schema.@namespace}[#else](default namespace)[/#if]</td>
        </tr>
        [#if attributeExists(schema.@file)]
        <tr>
          <td align="right">XML Schema:</td>
          <td><a href="${schema.@file}">${schema.@file}</a></td>
        </tr>
        [/#if]
      </table>
      [#if schema.elements.element?size > 0]

      <h2>Elements</h2>
      
      <ul>
        [#list schema.elements.element?sort_by("@name") as element]
        [@processElement element=element/]
        <li[#if isDeprecated(element)] class="deprecated"[/#if]><a href="el_${schema.@namespaceId}_${element.@name}.html">${element.@name}</a></li>
        [/#list]
      </ul>
      [/#if]
      [#if schema.types.type?size > 0]

      <h2>Types</h2>
      
      <ul>
        [#list schema.types.type?sort_by("@name") as type]
        [@processType type=type/]
        <li[#if isDeprecated(type)] class="deprecated"[/#if]><a href="${schema.@namespaceId}_${type.@name}.html">${type.@name}</a></li>
        [/#list]
      </ul>
      [/#if]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processElement element]
  [#assign schema=element?parent?parent/]
  [@file name="el_" + schema.@namespaceId + "_" + element.@name + ".html" charset="utf-8"]
    [@boilerplate title=element.@name breadcrumbs=[{"title" : "Home", "href" : indexPageName}, {"title" : "Data Model" , "href" : "model.html", "subnav" : nav_sections}, {"title" : schema.@namespaceId , "href" : schema.@namespaceId + ".html", "subnav" : nav_models}, {"title" : element.@name + " element" , "href" : "el_" + schema.@namespaceId + "_" + element.@name + ".html", "subnav" : nav_elements_by_ns[schema.@namespaceId?string]}] codeblocks=true]
      <h1>${element.@name} element</h1>
      [#if isDeprecated(element)]
      <p class="alert">This element has been deprecated.[#list element.tag as tag][#if tag.@name="deprecated"] ${tag}[/#if][/#list]</p>
      [/#if]
      <table>
      [#if attributeExists(element.@typeName) && attributeExists(element.@typeSchemaId)]
        <tr>
          <td align="right">Type:</td>
          <td><a href="${element.@typeSchemaId}_${element.@typeName}.html">${element.@typeName}</a></td>
        </tr>
      [/#if]
        <tr>
          <td align="right">Namespace:</td>
          <td>[#if schema.@namespace?length > 0]${schema.@namespace}[#else](default namespace)[/#if]</td>
        </tr>
        [#if attributeExists(schema.@file)]
        <tr>
          <td align="right">XML Schema:</td>
          <td><a href="${schema.@file}">${schema.@file}</a></td>
        </tr>
        [/#if]
        [#assign sinceTags = getTagValues(element, "since") /]
        [#if sinceTags?size > 0]
        <tr>
          <td align="right">Available Since:</td>
          <td>${sinceTags[0]}</td>
        </tr>
        [/#if]
        [#assign versionTags = getTagValues(element, "version") /]
        [#if versionTags?size > 0]
        <tr>
          <td align="right">Available Version:</td>
          <td>${versionTags[0]}</td>
        </tr>
        [/#if]
      </table>
      [#list element.documentation as documentation]
      <p>${documentation}</p>
      [/#list]
      [#list element.examplexml as examplexml]
      <h2>Example XML</h2>
      <code class="prettyprint lang-xml">${examplexml?string?xhtml}</code>
      [/#list]
      [#list element.examplejson as examplejson]
      <h2>Example JSON</h2>
      <code class="prettyprint lang-js">${examplejson?string?xhtml}</code>
      [/#list]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processType type]
  [#assign schema=type?parent?parent/]
  [@file name=schema.@namespaceId + "_" + type.@name + ".html" charset="utf-8"]
    [@boilerplate title=type.@name breadcrumbs=[{"title" : "Home", "href" : indexPageName}, {"title" : "Data Model" , "href" : "model.html", "subnav" : nav_sections}, {"title" : schema.@namespaceId , "href" : schema.@namespaceId + ".html", "subnav" : nav_models} , {"title" : type.@name , "href" : schema.@namespaceId + "_" + type.@name + ".html", "subnav" : nav_typedefs_by_ns[schema.@namespaceId?string]}] codeblocks=true]
      <h1>${type.@name}</h1>
      [#if isDeprecated(type)]
      <p class="alert">This type has been deprecated.[#list type.tag as tag][#if tag.@name="deprecated"] ${tag}[/#if][/#list]</p>
      [/#if]
      <table>
      [#if attributeExists(type.@extendsType)]
        [#list docsxml.data.schema.types.type as candidate]
          [#if attributeExists(candidate.@id) && (candidate.@id?string = type.@extendsType?string)]
        <tr>
          <td align="right">Extends:</td>
          <td><a href="${candidate?parent?parent.@namespaceId}_${candidate.@name}.html">${candidate.@name}</a></td>
        </tr>
            [#break/]
          [/#if]
        [/#list]
      [/#if]
        <tr>
          <td align="right">Namespace:</td>
          <td>[#if schema.@namespace?length > 0]${schema.@namespace}[#else](default namespace)[/#if]</td>
        </tr>
        [#if attributeExists(schema.@file)]
        <tr>
          <td align="right">XML Schema:</td>
          <td><a href="${schema.@file}">${schema.@file}</a></td>
        </tr>
        [/#if]
        [#assign sinceTags = getTagValues(type, "since") /]
        [#if sinceTags?size > 0]
        <tr>
          <td align="right">Available Since:</td>
          <td>${sinceTags[0]}</td>
        </tr>
        [/#if]
        [#assign versionTags = getTagValues(type, "version") /]
        [#if versionTags?size > 0]
        <tr>
          <td align="right">Version:</td>
          <td>${versionTags[0]}</td>
        </tr>
        [/#if]
      </table>
      [#list type.documentation as documentation]
      <p>${documentation}</p>
      [/#list]

      [#if type.values.item?size > 0]
        [#list type.values.item as value]
          [#if value_index = 0]
      <h2>Possible Values</h2>
      <table>
        <tr>
          <th>value</th>
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td[#if isDeprecated(value)] class="deprecated"[/#if]>${value.@value}</td>
          <td>
          [#list value.documentation as documentation]
            ${documentation}
          [/#list]
          </td>
        </tr>
          [#if !value_has_next]
      </table>
          [/#if]
        [/#list]
      [#else]
      <h2>XML</h2>
        [#list type.attributes.attribute as attribute]
          [#if attribute_index = 0]
      <h3>Attributes</h3>
      <table>
        <tr>
          <th>name</th>
          <th>type</th>
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td>[#if attributeExists(attribute.@name)]${attribute.@name}[/#if]</td>
          <td>[#if attributeExists(attribute.@typeSchemaId)][#if attributeExists(attribute.@typeName)][#assign typename=attribute.@typeName/][#else][#assign typename="(anonymous)"/][/#if]<a href="${attribute.@typeSchemaId}_${typename}.html">${typename}</a>[#elseif attributeExists(attribute.@typeName)]${attribute.@typeName}[/#if]</td>
          <td>${attribute}</td>
        </tr>
          [#if !attribute_has_next]
      </table>
          [/#if]
        [/#list]
        [#list type.elements.element as element]
          [#if element_index = 0]
      <h3>Elements</h3>
      <table>
        <tr>
          <th>name (type)</th>
          <th>min/max<br/>occurs</th>
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td>
          [#list element.choice as choice]
            [#if choice_index > 0]<br/>or [/#if][#if attributeExists(choice.@schemaId)]<a href="el_${choice.@schemaId}_${choice.@name}.html">${choice.@name}</a>[#else]${choice.@name}[/#if][#if attributeExists(choice.@typeSchemaId)][#if attributeExists(choice.@typeName)][#assign typename=choice.@typeName/][#else][#assign typename="(anonymous)"/][/#if] (<a href="${choice.@typeSchemaId}_${typename}.html">${typename}</a>)[#elseif attributeExists(choice.@typeName)] (${choice.@typeName})[/#if]
          [/#list]
          </td>
          <td>[#if attributeExists(element.@minOccurs)]${element.@minOccurs}[/#if]/[#if attributeExists(element.@maxOccurs)]${element.@maxOccurs}[/#if]</td>
          <td>
          [#list element.documentation as documentation]
            ${documentation}
          [/#list]
          </td>
        </tr>
          [#if !element_has_next]
      </table>
          [/#if]
        [/#list]
        [#list type.value as value]
      <h3>Value</h3>
      <table>
        <tr>
          <td align="right">Type:</td>
          <td>[#if attributeExists(value.@typeSchemaId)][#if attributeExists(value.@typeName)][#assign typename=value.@typeName/][#else][#assign typename="(anonymous)"/][/#if]<a href="${value.@typeSchemaId}_${typename}.html">${typename}</a>[#elseif attributeExists(value.@typeName)]${value.@typeName}[/#if]</td>
        </tr>
      </table>
      <p>${value}</p>
        [/#list]

        [#if includeExampleJson!true]
      <h2>JSON</h2>
      <table>
        <tr>
          <th>property</th>
          <th>type</th>
          <th>description</th>
        </tr>
          [#list type.attributes.attribute as attribute]
        <tr>
          <td>[#if attributeExists(attribute.@jsonName)]${attribute.@jsonName}[/#if]</td>
          <td>[#if attributeExists(attribute.@typeSchemaId)][#if attributeExists(attribute.@typeName)][#assign typename=attribute.@typeName/][#else][#assign typename="(anonymous)"/][/#if]<a href="${attribute.@typeSchemaId}_${typename}.html">${typename}</a>[#elseif attributeExists(attribute.@typeName)]${attribute.@typeName}[/#if]</td>
          <td>${attribute}</td>
        </tr>
          [/#list]
          [#list type.elements.element as element]
        <tr>
          <td>[#if attributeExists(element.@jsonName)]${element.@jsonName}[/#if]</td>
          <td>
            [#list element.choice as choice]
              [#if element.@maxOccurs = "unbounded"]array of [/#if][#if choice_index > 0]<br/>or [/#if][#if attributeExists(choice.@schemaId)]<a href="el_${choice.@schemaId}_${choice.@name}.html">${choice.@name}</a>[#else]${choice.@name}[/#if][#if attributeExists(choice.@typeSchemaId)][#if attributeExists(choice.@typeName)][#assign typename=choice.@typeName/][#else][#assign typename="(anonymous)"/][/#if] (<a href="${choice.@typeSchemaId}_${typename}.html">${typename}</a>)[#elseif attributeExists(choice.@typeName)] (${choice.@typeName})[/#if]
            [/#list]
          </td>
          <td>
            [#list element.documentation as documentation]
            ${documentation}
            [/#list]
          </td>
        </tr>
          [/#list]
          [#list type.value as value]
        <tr>
          <td>[#if attributeExists(value.@jsonName)]${value.@jsonName}[/#if]</td>
          <td>[#if attributeExists(value.@typeSchemaId)][#if attributeExists(value.@typeName)][#assign typename=value.@typeName/][#else][#assign typename="(anonymous)"/][/#if]<a href="${value.@typeSchemaId}_${typename}.html">${typename}</a>[#elseif attributeExists(value.@typeName)]${value.@typeName}[/#if]</td>
          <td>${value}</td>
        </tr>
          [/#list]
      </table>
        [/#if]
      [/#if]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processJsonType type]
  [@file name="json_" + type?parent.@schemaId + "_" + type.@name + ".html" charset="utf-8"]
    [@boilerplate title=type.@name breadcrumbs=[{"title" : "Home", "href" : indexPageName}, {"title" : "JSON" , "href" : "#"}, {"title" : type.@name , "href" : "json_" + type?parent.@schemaId + "_" + type.@name + ".html"}] codeblocks=true]
      <h1>${type.@name}</h1>

      <table>
      [#if attributeExists(type?parent.@schemaId)]
      <tr>
        <td align="right">JSON Schema ID:</td>
        <td>${type?parent.@schemaId}</td>
      </tr>
      [/#if]
      [#if attributeExists(type?parent.@file)]
      <tr>
        <td align="right">JSON Schema File:</td>
        <td><a href="${type?parent.@file}">${type?parent.@file}</a></td>
      </tr>
      [/#if]
      [#assign sinceTags = getTagValues(type, "since") /]
      [#if sinceTags?size > 0]
      <tr>
        <td align="right">Available Since:</td>
        <td>${sinceTags[0]}</td>
      </tr>
      [/#if]
      [#assign versionTags = getTagValues(type, "version") /]
      [#if versionTags?size > 0]
      <tr>
        <td align="right">Available Version:</td>
        <td>${versionTags[0]}</td>
      </tr>
      [/#if]
      </table>
      [#list type.documentation as documentation]
      <p>${documentation}</p>
      [/#list]
      [#list type.property as property]
        [#if property_index = 0]
      <h2>Properties</h2>
      <table>
        <tr>
          <th>name</th>
          <th>type</th>
          <th>description</th>
        </tr>
        [/#if]
        <tr>
          <td>[#if attributeExists(property.@name)]${property.@name}[/#if]</td>
          <td>[#if property.@isList = "true"]List of [/#if][#if attributeExists(property.@typeSchemaId)][#if attributeExists(property.@typeName)][#assign typename=property.@typeName/][#else][#assign typename="(anonymous)"/][/#if]<a href="json_${property.@typeSchemaId}_${typename}.html">${typename}</a>[#elseif attributeExists(property.@typeName)]${property.@typeName}[/#if]</td>
          <td>[#if attributeExists(property.@documentation)]${property.@documentation}[/#if]</td>
        </tr>
        [#if !property_has_next]
      </table>
        [/#if]
      [/#list]
      [#list type.enumValue as enumValue]
        [#if enumValue_index = 0]
      <h2>Possible Values</h2>
      <table>
        <tr>
          <th>value</th>
          <th>description</th>
        </tr>
        [/#if]
        <tr>
          <td>[#list enumValue.value as value]${value} [/#list]</td>
          <td>[#list enumValue.documentation as documentation]${documentation} [/#list]</td>
        </tr>
        [#if !enumValue_has_next]
      </table>
        [/#if]
      [/#list]
    [/@boilerplate]
  [/@file]
[/#macro]
