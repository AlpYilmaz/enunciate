[#ftl]
[#-- @ftlvariable name="type" type="com.webcohesion.enunciate.modules.jackson.model.TypeDefinition" --]
[#-- @ftlvariable name="generatedCodeLicense" type="java.lang.String" --]
[#--template for the client-side complex type.--]
[@file name=(type.simpleName + ".java")  package=packageFor(type) charset="utf-8"]
/**
 * ${(generatedCodeLicense!"")?replace("\n", "\n * ")}
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 */
package ${packageFor(type)};

import com.fasterxml.jackson.annotation.*;

/**
 * ${type.docComment!"(no documentation provided)"?chop_linebreak?replace("\n", "\n * ")}
 */
public [#if type.abstract]abstract [/#if][#if type.final]final [/#if]class ${simpleNameFor(type)} [#if !type.baseObject]extends ${classnameFor(type.superclass)} [#else]implements java.io.Serializable [/#if]{

  [#if type.value??]
    [#if !isFacetExcluded(type.value)]
  @JsonIgnore
  private ${classnameFor(type.value)} _${type.value.simpleName};
    [/#if]
  [#else]
    [#list type.members as member]
      [#if !isFacetExcluded(member)]
  @JsonIgnore
  private [#if member.choices?size > 1]java.util.Collection<com.fasterxml.jackson.databind.node.ObjectNode>[#else]${classnameFor(member)}[/#if] _${member.simpleName};
      [/#if]
    [/#list]
  [/#if]
  [#if type.wildcardMember??]
  @JsonIgnore
  private java.util.Map<String, Object> otherAttributes;
  [/#if]
  [#if type.value??]
    [#if !isFacetExcluded(type.value)]

  /**
   * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @JsonValue
  public ${classnameFor(type.value)} get${type.value.simpleName.toString()?cap_first}() {
    return this._${type.value.simpleName};
  }

  /**
   * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @JsonValue
  public void set${type.value.simpleName.toString()?cap_first}(${classnameFor(type.value)} _${type.value.simpleName}) {
    this._${type.value.simpleName} = _${type.value.simpleName};
  }
      [#if type.value.referencesQNameEnum!false]

  /**
   * Convenience accessor for the known value of a ${type.value.simpleName} property.
   *
   * @see ${classnameFor(type.value.QNameEnumRef)}#convertFromKnownQName
   */
  @JsonIgnore
  public ${classnameFor(type.value.QNameEnumRef)} getKnown${type.value.simpleName.toString()?cap_first}() {
    return ${classnameFor(type.value.QNameEnumRef)}.convertFromKnownQName(get${type.value.simpleName.toString()?cap_first}());
  }

  /**
   * Convenience accessor for the known value of a ${type.value.simpleName} property.
   *
   * @see ${classnameFor(type.value.QNameEnumRef)}#convertToKnownQName
   */
  @JsonIgnore
  public void setKnown${type.value.simpleName.toString()?cap_first}(${classnameFor(type.value.QNameEnumRef)} _${type.value.simpleName}) {
    set${type.value.simpleName.toString()?cap_first}(${classnameFor(type.value.QNameEnumRef)}.convertToKnownQName(_${type.value.simpleName})[#if type.value.resolvedAccessorType.isInstanceOf("java.lang.String")].toString()[/#if]);
  }
      [/#if]
    [/#if]
  [#else]
    [#list type.members as member]
      [#if !isFacetExcluded(member)]

  /**
   * ${(member.javaDoc.return!member.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @JsonProperty("${member.name}")
  public [#if member.choices?size > 1]java.util.Collection<com.fasterxml.jackson.databind.node.ObjectNode>[#else]${classnameFor(member)}[/#if] get${member.simpleName.toString()?cap_first}() {
    return this._${member.simpleName};
  }

  /**
   * ${(member.javaDoc.return!member.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @JsonProperty("${member.name}")
  public void set${member.simpleName.toString()?cap_first}([#if member.choices?size > 1]java.util.Collection<com.fasterxml.jackson.databind.node.ObjectNode>[#else]${classnameFor(member)}[/#if] _${member.simpleName}) {
    this._${member.simpleName} = _${member.simpleName};
  }
        [#if member.referencesQNameEnum!false]

  /**
   * Convenience accessor for the known value of a ${member.simpleName} property.
   *
   * @see ${classnameFor(member.QNameEnumRef)}#convertFromKnownQName
   */
  @JsonIgnore
  public ${classnameFor(member.QNameEnumRef)} getKnown${member.simpleName.toString()?cap_first}() {
    return ${classnameFor(member.QNameEnumRef)}.convertFromKnownQName(get${member.simpleName.toString()?cap_first}());
  }

  /**
   * Convenience accessor for the known value of a ${member.simpleName} property.
   *
   * @see ${classnameFor(member.QNameEnumRef)}#convertToKnownQName
   */
  @JsonIgnore
  public void setKnown${member.simpleName.toString()?cap_first}(${classnameFor(member.QNameEnumRef)} _${member.simpleName}) {
    set${member.simpleName.toString()?cap_first}(${classnameFor(member.QNameEnumRef)}.convertToKnownQName(_${member.simpleName})[#if member.resolvedAccessorType.isInstanceOf("java.lang.String")].toString()[/#if]);
  }
        [/#if]
      [/#if]
    [/#list]
  [/#if]
  [#if type.wildcardMember??]

  /**
   * The other attributes.
   *
   * @return The other attributes.
   */
  @JsonAnyGetter
  public java.util.Map<String, Object> getOtherAttributes() {
    return this.otherAttributes;
  }

  /**
   * Add an "other" attribute.
   *
   * @param key The key.
   * @param value The value.
   */
  @JsonAnySetter
  public void addOtherAttribute(String key, Object value) {
    if (this.otherAttributes == null) {
      this.otherAttributes = new java.util.TreeMap<String, Object>();
    }
    this.otherAttributes.put(key, value);
  }
  [/#if]
}
[/@file]