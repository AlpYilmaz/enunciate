[#ftl]
[#-- @ftlvariable name="sample_resource" type="com.webcohesion.enunciate.api.resources.Method" --]
[#-- @ftlvariable name="sample_service_method" type="com.webcohesion.enunciate.modules.jaxws.model.WebMethod" --]
<p>
  The Java client-side library is used to access the Web service API for this application using Java.
</p>
[#if sample_service_method??]

<p>
  The Java client-side library uses <a href="https://jax-ws.dev.java.net/">JAX-WS</a> to access the SOAP API
  for this application.
</p>
[/#if]
[#if sample_resource??]

<p>
  The Java client-side library is used to provide the set of Java objects that can be serialized
  to/from XML using <a href="https://jaxb.dev.java.net/">JAXB</a>.  This is useful for accessing the
  resources that are published by this application.
</p>
[/#if]
[#if sample_service_method??]

<div class="panel panel-default">
  <div class="panel-heading">JAX-WS Example</div>
  <div class="panel-body">
    <pre class="prettyprint lang-java">
// instantiate a new service with an impl
// (or through dependency injection, or whatever)...
${sample_service_method.declaringEndpointInterface.simpleName} service = new ${sample_service_method.declaringEndpointInterface.simpleName}();

//make the remote call to read the result...
result = service.${sample_service_method.simpleName}([#list sample_service_method.webParameters as param]${param.clientSimpleName}[#if param_has_next], [/#if][/#list]);

//handle the result as needed...
    </pre>
  </div>
</div>

[/#if]
[#if sample_resource??]
  [#if sample_resource.responseEntity??]

<div class="panel panel-default">
  <div class="panel-heading">Resources Example (Raw JAXB)</div>
  <div class="panel-body">
    <pre class="prettyprint lang-java">
java.net.URL url = new java.net.URL(baseURL + "${sample_resource.resource.path}");
JAXBContext context = JAXBContext.newInstance( ${classnameFor(sample_resource.responseEntity)}.class[#if sample_resource.requestEntity??], ${classnameFor(sample_resource.requestEntity)}.class[/#if] );
java.net.URLConnection connection = url.openConnection();
[#if sample_resource.requestEntity??]
connection.setDoOutput(true);
[/#if]
connection.connect();

Unmarshaller unmarshaller = context.createUnmarshaller();
[#if sample_resource.requestEntity??]
Marshaller marshaller = context.createMarshaller();
marshaller.marshal(${simpleNameFor(sample_resource.requestEntity)?uncap_first}, connection.getOutputStream());
[/#if]
${simpleNameFor(sample_resource.responseEntity)} result = (${simpleNameFor(sample_resource.responseEntity)}) unmarshaller.unmarshal( connection.getInputStream() );
//handle the result as needed...
    </pre>
  </div>
</div>

<div class="panel panel-default">
  <div class="panel-heading">Resources Example (Jersey client)</div>
  <div class="panel-body">
    <pre class="prettyprint lang-java">
com.sun.jersey.api.client.Client client = com.sun.jersey.api.client.Client.create();

${simpleNameFor(sample_resource.responseEntity)} result = client.resource(baseUrl + "${sample_resource.resource.path}")
  [#if sample_resource.requestEntity??].entity(${simpleNameFor(sample_resource.requestEntity)?uncap_first})[/#if]
  .${sample_resource.httpMethod?lower_case}(${simpleNameFor(sample_resource.responseEntity)}.class);

//handle the result as needed...
    </pre>
  </div>
</div>
  [/#if]
[/#if]